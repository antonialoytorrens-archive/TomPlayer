<refentry id="GtkContainer">
<refmeta>
<refentrytitle role="top_of_page">GtkContainer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GTK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GtkContainer</refname>
<refpurpose>Base class for widgets which contain other widgets</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;gtk/gtk.h&gt;


                    <link linkend="GtkContainer-struct">GtkContainer</link>;
#define             <link linkend="GTK-IS-RESIZE-CONTAINER:CAPS">GTK_IS_RESIZE_CONTAINER</link>             (widget)
#define             <link linkend="GTK-CONTAINER-WARN-INVALID-CHILD-PROPERTY-ID:CAPS">GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID</link>(object, property_id, pspec)
#define             <link linkend="gtk-container-border-width">gtk_container_border_width</link>
<link linkend="void">void</link>                <link linkend="gtk-container-add">gtk_container_add</link>                   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-container-remove">gtk_container_remove</link>                (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-container-add-with-properties">gtk_container_add_with_properties</link>   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *first_prop_name,
                                                         ...);
<link linkend="GtkResizeMode">GtkResizeMode</link>       <link linkend="gtk-container-get-resize-mode">gtk_container_get_resize_mode</link>       (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="void">void</link>                <link linkend="gtk-container-set-resize-mode">gtk_container_set_resize_mode</link>       (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkResizeMode">GtkResizeMode</link> resize_mode);
<link linkend="void">void</link>                <link linkend="gtk-container-check-resize">gtk_container_check_resize</link>          (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="void">void</link>                <link linkend="gtk-container-foreach">gtk_container_foreach</link>               (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkCallback">GtkCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> callback_data);
<link linkend="void">void</link>                <link linkend="gtk-container-foreach-full">gtk_container_foreach_full</link>          (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkCallback">GtkCallback</link> callback,
                                                         <link linkend="GtkCallbackMarshal">GtkCallbackMarshal</link> marshal,
                                                         <link linkend="gpointer">gpointer</link> callback_data,
                                                         <link linkend="GtkDestroyNotify">GtkDestroyNotify</link> notify);
#define             <link linkend="gtk-container-children">gtk_container_children</link>
<link linkend="GList">GList</link>*              <link linkend="gtk-container-get-children">gtk_container_get_children</link>          (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="void">void</link>                <link linkend="gtk-container-set-reallocate-redraws">gtk_container_set_reallocate_redraws</link>
                                                        (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="gboolean">gboolean</link> needs_redraws);
<link linkend="void">void</link>                <link linkend="gtk-container-set-focus-child">gtk_container_set_focus_child</link>       (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child);
<link linkend="GtkAdjustment">GtkAdjustment</link>*      <link linkend="gtk-container-get-focus-vadjustment">gtk_container_get_focus_vadjustment</link> (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="void">void</link>                <link linkend="gtk-container-set-focus-vadjustment">gtk_container_set_focus_vadjustment</link> (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkAdjustment">GtkAdjustment</link> *adjustment);
<link linkend="GtkAdjustment">GtkAdjustment</link>*      <link linkend="gtk-container-get-focus-hadjustment">gtk_container_get_focus_hadjustment</link> (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="void">void</link>                <link linkend="gtk-container-set-focus-hadjustment">gtk_container_set_focus_hadjustment</link> (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkAdjustment">GtkAdjustment</link> *adjustment);
<link linkend="void">void</link>                <link linkend="gtk-container-resize-children">gtk_container_resize_children</link>       (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="GType">GType</link>               <link linkend="gtk-container-child-type">gtk_container_child_type</link>            (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="void">void</link>                <link linkend="gtk-container-child-get">gtk_container_child_get</link>             (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *first_prop_name,
                                                         ...);
<link linkend="void">void</link>                <link linkend="gtk-container-child-set">gtk_container_child_set</link>             (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *first_prop_name,
                                                         ...);
<link linkend="void">void</link>                <link linkend="gtk-container-child-get-property">gtk_container_child_get_property</link>    (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="gtk-container-child-set-property">gtk_container_child_set_property</link>    (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="gtk-container-child-get-valist">gtk_container_child_get_valist</link>      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         <link linkend="va-list">va_list</link> var_args);
<link linkend="void">void</link>                <link linkend="gtk-container-child-set-valist">gtk_container_child_set_valist</link>      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         <link linkend="va-list">va_list</link> var_args);
<link linkend="void">void</link>                <link linkend="gtk-container-forall">gtk_container_forall</link>                (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkCallback">GtkCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> callback_data);
<link linkend="guint">guint</link>               <link linkend="gtk-container-get-border-width">gtk_container_get_border_width</link>      (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="void">void</link>                <link linkend="gtk-container-set-border-width">gtk_container_set_border_width</link>      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="guint">guint</link> border_width);
<link linkend="void">void</link>                <link linkend="gtk-container-propagate-expose">gtk_container_propagate_expose</link>      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         <link linkend="GdkEventExpose">GdkEventExpose</link> *event);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-container-get-focus-chain">gtk_container_get_focus_chain</link>       (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GList">GList</link> **focusable_widgets);
<link linkend="void">void</link>                <link linkend="gtk-container-set-focus-chain">gtk_container_set_focus_chain</link>       (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GList">GList</link> *focusable_widgets);
<link linkend="void">void</link>                <link linkend="gtk-container-unset-focus-chain">gtk_container_unset_focus_chain</link>     (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="GParamSpec">GParamSpec</link>*         <link linkend="gtk-container-class-find-child-property">gtk_container_class_find_child_property</link>
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cclass,
                                                         const <link linkend="gchar">gchar</link> *property_name);
<link linkend="void">void</link>                <link linkend="gtk-container-class-install-child-property">gtk_container_class_install_child_property</link>
                                                        (<link linkend="GtkContainerClass">GtkContainerClass</link> *cclass,
                                                         <link linkend="guint">guint</link> property_id,
                                                         <link linkend="GParamSpec">GParamSpec</link> *pspec);
<link linkend="GParamSpec">GParamSpec</link>**        <link linkend="gtk-container-class-list-child-properties">gtk_container_class_list_child_properties</link>
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cclass,
                                                         <link linkend="guint">guint</link> *n_properties);


</synopsis>
</refsynopsisdiv>

<refsect1 role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
         +----<link linkend="GtkObject">GtkObject</link>
               +----<link linkend="GtkWidget">GtkWidget</link>
                     +----GtkContainer
                           +----<link linkend="GtkBin">GtkBin</link>
                           +----<link linkend="GtkBox">GtkBox</link>
                           +----<link linkend="GtkCList">GtkCList</link>
                           +----<link linkend="GtkFixed">GtkFixed</link>
                           +----<link linkend="GtkPaned">GtkPaned</link>
                           +----<link linkend="GtkIconView">GtkIconView</link>
                           +----<link linkend="GtkLayout">GtkLayout</link>
                           +----<link linkend="GtkList">GtkList</link>
                           +----<link linkend="GtkMenuShell">GtkMenuShell</link>
                           +----<link linkend="GtkNotebook">GtkNotebook</link>
                           +----<link linkend="GtkSocket">GtkSocket</link>
                           +----<link linkend="GtkTable">GtkTable</link>
                           +----<link linkend="GtkTextView">GtkTextView</link>
                           +----<link linkend="GtkToolbar">GtkToolbar</link>
                           +----<link linkend="GtkTree">GtkTree</link>
                           +----<link linkend="GtkTreeView">GtkTreeView</link>
</synopsis>

</refsect1>



<refsect1 role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
GtkContainer implements
 <link linkend="AtkImplementorIface">AtkImplementorIface</link>.</para>

</refsect1>


<refsect1 role="properties">
<title role="properties.title">Properties</title>
<synopsis>

  <link linkend="GtkContainer--border-width">border-width</link>             <link linkend="guint">guint</link>                 : Read / Write
  <link linkend="GtkContainer--child">child</link>                    <link linkend="GtkWidget">GtkWidget</link>             : Write
  <link linkend="GtkContainer--resize-mode">resize-mode</link>              <link linkend="GtkResizeMode">GtkResizeMode</link>         : Read / Write
</synopsis>
</refsect1>

<refsect1 role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>

  <link linkend="GtkContainer-add">add</link>                                            : Run First
  <link linkend="GtkContainer-check-resize">check-resize</link>                                   : Run Last
  <link linkend="GtkContainer-remove">remove</link>                                         : Run First
  <link linkend="GtkContainer-set-focus-child">set-focus-child</link>                                : Run First
</synopsis>
</refsect1>


<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
A GTK+ user interface is constructed by nesting widgets inside widgets. Container widgets are the inner
nodes in the resulting tree of widgets: they contain other widgets. So, for example, you might have a 
<link linkend="GtkWindow"><type>GtkWindow</type></link> containing a <link linkend="GtkFrame"><type>GtkFrame</type></link> containing a GtkLabel. If you wanted an image instead of a textual label 
inside the frame, you might replace the <link linkend="GtkLabel"><type>GtkLabel</type></link> widget with a <link linkend="GtkImage"><type>GtkImage</type></link> widget.
</para>
<para>
There are two major kinds of container widgets in GTK+. Both are subclasses of the abstract <link linkend="GtkContainer"><type>GtkContainer</type></link> 
base class.
</para>
<para>
The first type of container widget has a single child widget and derives from <link linkend="GtkBin"><type>GtkBin</type></link>. These containers
are <firstterm>decorators</firstterm>, which add some kind of functionality to the child. For example, 
a <link linkend="GtkButton"><type>GtkButton</type></link> makes its child into a clickable button; a <link linkend="GtkFrame"><type>GtkFrame</type></link> draws a frame around its child and 
a <link linkend="GtkWindow"><type>GtkWindow</type></link> places its child widget inside a top-level window.
</para>
<para>
The second type of container can have more than one child; its purpose is to manage 
<firstterm>layout</firstterm>. This means that these containers assign sizes and positions to their children. 
For example, a <link linkend="GtkHBox"><type>GtkHBox</type></link> arranges its children in a horizontal row, and a <link linkend="GtkTable"><type>GtkTable</type></link> arranges the widgets it
contains in a two-dimensional grid. 
</para>
<para>
To fulfill its task, a layout container must negotiate the size requirements with its parent and its children.
This negotiation is carried out in two phases, <firstterm>size requisition</firstterm> and 
<firstterm>size allocation</firstterm>. 
</para>
<refsect2 id="size-requisition"><title>Size Requisition</title>
<para>
The size requisition of a widget is it's desired width and height. This is represented by a <link linkend="GtkRequisition"><type>GtkRequisition</type></link>.
</para>
<para>
How a widget determines its desired size depends on the widget. A <link linkend="GtkLabel"><type>GtkLabel</type></link>, for example, requests enough space 
to display all its text. Container widgets generally base their size request on the requisitions of their 
children.  
</para>
<para>
The size requisition phase of the widget layout process operates top-down. It starts at a top-level widget,
typically a <link linkend="GtkWindow"><type>GtkWindow</type></link>. The top-level widget asks its child for its size requisition by calling
<link linkend="gtk-widget-size-request"><function>gtk_widget_size_request()</function></link>. To determine its requisition, the child asks its own children for their requisitions 
and so on. Finally, the top-level widget will get a requisition back from its child. 
</para>
</refsect2>
<refsect2 id="size-allocation"><title>Size Allocation</title>
<para>
When the top-level widget has determined how much space its child would like to have, the second phase of the
size negotiation, size allocation, begins. Depending on its configuration (see <link linkend="gtk-window-set-resizable"><function>gtk_window_set_resizable()</function></link>), the 
top-level widget may be able to expand in order to satisfy the size request or it may have to ignore the size 
request and keep its fixed size. It then tells its child widget how much space it gets by calling 
<link linkend="gtk-widget-size-allocate"><function>gtk_widget_size_allocate()</function></link>. The child widget divides the space among its children and tells each child how much 
space it got, and so on. Under normal circumstances, a <link linkend="GtkWindow"><type>GtkWindow</type></link> will always give its child the amount of space
the child requested.
</para>
<para>
A child's size allocation is represented by a <link linkend="GtkAllocation"><type>GtkAllocation</type></link>. This struct contains not only a width and height, 
but also a position (i.e. X and Y coordinates), so that containers can tell their children not only how much
space they have gotten, but also where they are positioned inside the space available to the container. 
</para>
<para>
Widgets are required to honor the size allocation they receive; a size request is only a request, and widgets
must be able to cope with any size.
</para>
</refsect2>
<refsect2 id="child-properties"><title>Child properties</title>
<para>
<structname>GtkContainer</structname> introduces <firstterm>child 
properties</firstterm> - these are object properties that are not specific
to either the container or the contained widget, but rather to their relation.
Typical examples of child properties are the position or pack-type of a widget
which is contained in a <link linkend="GtkBox"><type>GtkBox</type></link>.</para>
<para>
Use <link linkend="gtk-container-class-install-child-property"><function>gtk_container_class_install_child_property()</function></link> to install child properties 
for a container class and <link linkend="gtk-container-class-find-child-property"><function>gtk_container_class_find_child_property()</function></link> or
<link linkend="gtk-container-class-list-child-properties"><function>gtk_container_class_list_child_properties()</function></link> to get information about existing
child properties.
</para>
<para>
To set the value of a child property, use <link linkend="gtk-container-child-set-property"><function>gtk_container_child_set_property()</function></link>, 
<link linkend="gtk-container-child-set"><function>gtk_container_child_set()</function></link> or <link linkend="gtk-container-child-set-valist"><function>gtk_container_child_set_valist()</function></link>. 
To obtain the value of a child property, use 
<link linkend="gtk-container-child-get-property"><function>gtk_container_child_get_property()</function></link>, <link linkend="gtk-container-child-get"><function>gtk_container_child_get()</function></link> or
<link linkend="gtk-container-child-get-valist"><function>gtk_container_child_get_valist()</function></link>. To emit notification about child property 
changes, use <link linkend="gtk-widget-child-notify"><function>gtk_widget_child_notify()</function></link>.
</para>
</refsect2>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="GtkContainer-struct" role="struct"/>GtkContainer</title>
<indexterm><primary>GtkContainer</primary></indexterm><programlisting>typedef struct _GtkContainer GtkContainer;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GTK-IS-RESIZE-CONTAINER:CAPS" role="macro"/>GTK_IS_RESIZE_CONTAINER()</title>
<indexterm><primary>GTK_IS_RESIZE_CONTAINER</primary></indexterm><programlisting>#define GTK_IS_RESIZE_CONTAINER(widget) (GTK_IS_CONTAINER (widget) &amp;&amp; ((GtkContainer*) (widget))-&gt;resize_mode != GTK_RESIZE_PARENT)
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GTK-CONTAINER-WARN-INVALID-CHILD-PROPERTY-ID:CAPS" role="macro"/>GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID()</title>
<indexterm><primary>GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID</primary></indexterm><programlisting>#define             GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID(object, property_id, pspec)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pspec</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-border-width" role="macro" condition="deprecated:Use gtk_container_set_border_width() instead."/>gtk_container_border_width</title>
<indexterm role="deprecated"><primary>gtk_container_border_width</primary></indexterm><programlisting>#define	gtk_container_border_width		gtk_container_set_border_width
</programlisting>
<warning><para><literal>gtk_container_border_width</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gtk-container-set-border-width"><function>gtk_container_set_border_width()</function></link> instead.</para></warning>
<para>
Does the same as <link linkend="gtk-container-set-border-width"><function>gtk_container_set_border_width()</function></link>.
</para></refsect2>
<refsect2>
<title><anchor id="gtk-container-add" role="function"/>gtk_container_add ()</title>
<indexterm><primary>gtk_container_add</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_add                   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Adds <parameter>widget</parameter> to <parameter>container</parameter>. Typically used for simple containers
such as <link linkend="GtkWindow"><type>GtkWindow</type></link>, <link linkend="GtkFrame"><type>GtkFrame</type></link>, or <link linkend="GtkButton"><type>GtkButton</type></link>; for more complicated
layout containers such as <link linkend="GtkBox"><type>GtkBox</type></link> or <link linkend="GtkTable"><type>GtkTable</type></link>, this function will
pick default packing parameters that may not be correct.  So
consider functions such as <link linkend="gtk-box-pack-start"><function>gtk_box_pack_start()</function></link> and
<link linkend="gtk-table-attach"><function>gtk_table_attach()</function></link> as an alternative to <link linkend="gtk-container-add"><function>gtk_container_add()</function></link> in
those cases. A widget may be added to only one container at a time;
you can't place the same widget inside two different containers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a widget to be placed inside <parameter>container</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-remove" role="function"/>gtk_container_remove ()</title>
<indexterm><primary>gtk_container_remove</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_remove                (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Removes <parameter>widget</parameter> from <parameter>container</parameter>. <parameter>widget</parameter> must be inside <parameter>container</parameter>.
Note that <parameter>container</parameter> will own a reference to <parameter>widget</parameter>, and that this
may be the last reference held; so removing a widget from its
container can destroy that widget. If you want to use <parameter>widget</parameter>
again, you need to add a reference to it while it's not inside
a container, using <link linkend="g-object-ref"><function>g_object_ref()</function></link>. If you don't want to use <parameter>widget</parameter>
again it's usually more efficient to simply destroy it directly
using <link linkend="gtk-widget-destroy"><function>gtk_widget_destroy()</function></link> since this will remove it from the
container and help break any circular reference count cycles.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a current child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-add-with-properties" role="function"/>gtk_container_add_with_properties ()</title>
<indexterm><primary>gtk_container_add_with_properties</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_add_with_properties   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *first_prop_name,
                                                         ...);</programlisting>
<para>
Adds <parameter>widget</parameter> to <parameter>container</parameter>, setting child properties at the same time.
See <link linkend="gtk-container-add"><function>gtk_container_add()</function></link> and <link linkend="gtk-container-child-set"><function>gtk_container_child_set()</function></link> for more details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link> 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a widget to be placed inside <parameter>container</parameter> 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_prop_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first child property to set 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated list of property names and values, starting
          with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-resize-mode" role="function"/>gtk_container_get_resize_mode ()</title>
<indexterm><primary>gtk_container_get_resize_mode</primary></indexterm><programlisting><link linkend="GtkResizeMode">GtkResizeMode</link>       gtk_container_get_resize_mode       (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Returns the resize mode for the container. See
<link linkend="gtk-container-set-resize-mode"><function>gtk_container_set_resize_mode()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the current resize mode
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-resize-mode" role="function"/>gtk_container_set_resize_mode ()</title>
<indexterm><primary>gtk_container_set_resize_mode</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_set_resize_mode       (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkResizeMode">GtkResizeMode</link> resize_mode);</programlisting>
<para>
Sets the resize mode for the container.
</para>
<para>
The resize mode of a container determines whether a resize request 
will be passed to the container's parent, queued for later execution
or executed immediately.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resize_mode</parameter>&nbsp;:</term>
<listitem><simpara> the new resize mode.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-check-resize" role="function"/>gtk_container_check_resize ()</title>
<indexterm><primary>gtk_container_check_resize</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_check_resize          (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-foreach" role="function"/>gtk_container_foreach ()</title>
<indexterm><primary>gtk_container_foreach</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_foreach               (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkCallback">GtkCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> callback_data);</programlisting>
<para>
Invokes <parameter>callback</parameter> on each non-internal child of <parameter>container</parameter>.  See
<link linkend="gtk-container-forall"><function>gtk_container_forall()</function></link> for details on what constitutes an
"internal" child.  Most applications should use
<link linkend="gtk-container-foreach"><function>gtk_container_foreach()</function></link>, rather than <link linkend="gtk-container-forall"><function>gtk_container_forall()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> a callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback_data</parameter>&nbsp;:</term>
<listitem><simpara> callback user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-foreach-full" role="function" condition="deprecated:Use gtk_container_foreach() instead."/>gtk_container_foreach_full ()</title>
<indexterm role="deprecated"><primary>gtk_container_foreach_full</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_foreach_full          (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkCallback">GtkCallback</link> callback,
                                                         <link linkend="GtkCallbackMarshal">GtkCallbackMarshal</link> marshal,
                                                         <link linkend="gpointer">gpointer</link> callback_data,
                                                         <link linkend="GtkDestroyNotify">GtkDestroyNotify</link> notify);</programlisting>
<warning><para><literal>gtk_container_foreach_full</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gtk-container-foreach"><function>gtk_container_foreach()</function></link> instead.</para></warning>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>marshal</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>notify</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-children" role="macro" condition="deprecated:Use gtk_container_get_children() instead."/>gtk_container_children</title>
<indexterm role="deprecated"><primary>gtk_container_children</primary></indexterm><programlisting>#define gtk_container_children gtk_container_get_children
</programlisting>
<warning><para><literal>gtk_container_children</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gtk-container-get-children"><function>gtk_container_get_children()</function></link> instead.</para></warning>
<para>
Does the same as <link linkend="gtk-container-get-children"><function>gtk_container_get_children()</function></link>.
</para></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-children" role="function"/>gtk_container_get_children ()</title>
<indexterm><primary>gtk_container_get_children</primary></indexterm><programlisting><link linkend="GList">GList</link>*              gtk_container_get_children          (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Returns the container's non-internal children. See
<link linkend="gtk-container-forall"><function>gtk_container_forall()</function></link> for details on what constitutes an "internal" child.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly-allocated list of the container's non-internal children.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-reallocate-redraws" role="function"/>gtk_container_set_reallocate_redraws ()</title>
<indexterm><primary>gtk_container_set_reallocate_redraws</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_set_reallocate_redraws
                                                        (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="gboolean">gboolean</link> needs_redraws);</programlisting>
<para>
Sets the <parameter>reallocate_redraws</parameter> flag of the container to the given value.
</para>
<para>
Containers requesting reallocation redraws get automatically
redrawn if any of their children changed allocation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>needs_redraws</parameter>&nbsp;:</term>
<listitem><simpara> the new value for the container's <parameter>reallocate_redraws</parameter> flag.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-focus-child" role="function"/>gtk_container_set_focus_child ()</title>
<indexterm><primary>gtk_container_set_focus_child</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_set_focus_child       (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-focus-vadjustment" role="function"/>gtk_container_get_focus_vadjustment ()</title>
<indexterm><primary>gtk_container_get_focus_vadjustment</primary></indexterm><programlisting><link linkend="GtkAdjustment">GtkAdjustment</link>*      gtk_container_get_focus_vadjustment (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Retrieves the vertical focus adjustment for the container. See
<link linkend="gtk-container-set-focus-vadjustment"><function>gtk_container_set_focus_vadjustment()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the vertical focus adjustment, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if
  none has been set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-focus-vadjustment" role="function"/>gtk_container_set_focus_vadjustment ()</title>
<indexterm><primary>gtk_container_set_focus_vadjustment</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_set_focus_vadjustment (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkAdjustment">GtkAdjustment</link> *adjustment);</programlisting>
<para>
Hooks up an adjustment to focus handling in a container, so when a child of the 
container is focused, the adjustment is scrolled to show that widget. This function
sets the vertical alignment. See <link linkend="gtk-scrolled-window-get-vadjustment"><function>gtk_scrolled_window_get_vadjustment()</function></link> for a typical
way of obtaining the adjustment and <link linkend="gtk-container-set-focus-hadjustment"><function>gtk_container_set_focus_hadjustment()</function></link> for setting
the horizontal adjustment.
</para>
<para>
The adjustments have to be in pixel units and in the same coordinate system as the 
allocation for immediate children of the container.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>adjustment</parameter>&nbsp;:</term>
<listitem><simpara> an adjustment which should be adjusted when the focus is moved among the
  descendents of <parameter>container</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-focus-hadjustment" role="function"/>gtk_container_get_focus_hadjustment ()</title>
<indexterm><primary>gtk_container_get_focus_hadjustment</primary></indexterm><programlisting><link linkend="GtkAdjustment">GtkAdjustment</link>*      gtk_container_get_focus_hadjustment (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Retrieves the horizontal focus adjustment for the container. See
<link linkend="gtk-container-set-focus-hadjustment"><function>gtk_container_set_focus_hadjustment()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the horizontal focus adjustment, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if
  none has been set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-focus-hadjustment" role="function"/>gtk_container_set_focus_hadjustment ()</title>
<indexterm><primary>gtk_container_set_focus_hadjustment</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_set_focus_hadjustment (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkAdjustment">GtkAdjustment</link> *adjustment);</programlisting>
<para>
Hooks up an adjustment to focus handling in a container, so when a child of the 
container is focused, the adjustment is scrolled to show that widget. This function
sets the horizontal alignment. See <link linkend="gtk-scrolled-window-get-hadjustment"><function>gtk_scrolled_window_get_hadjustment()</function></link> for a typical
way of obtaining the adjustment and <link linkend="gtk-container-set-focus-vadjustment"><function>gtk_container_set_focus_vadjustment()</function></link> for setting
the vertical adjustment.
</para>
<para>
The adjustments have to be in pixel units and in the same coordinate system as the 
allocation for immediate children of the container.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>adjustment</parameter>&nbsp;:</term>
<listitem><simpara> an adjustment which should be adjusted when the focus is moved among the
  descendents of <parameter>container</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-resize-children" role="function"/>gtk_container_resize_children ()</title>
<indexterm><primary>gtk_container_resize_children</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_resize_children       (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-type" role="function"/>gtk_container_child_type ()</title>
<indexterm><primary>gtk_container_child_type</primary></indexterm><programlisting><link linkend="GType">GType</link>               gtk_container_child_type            (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Returns the type of the children supported by the container.
</para>
<para>
Note that this may return <link linkend="G-TYPE-NONE:CAPS"><literal>G_TYPE_NONE</literal></link> to indicate that no more
children can be added, e.g. for a <link linkend="GtkPaned"><type>GtkPaned</type></link> which already has two 
children.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GType"><type>GType</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-get" role="function"/>gtk_container_child_get ()</title>
<indexterm><primary>gtk_container_child_get</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_child_get             (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *first_prop_name,
                                                         ...);</programlisting>
<para>
Gets the values of one or more child properties for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_prop_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first property to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated list of property names and <link linkend="GValue"><type>GValue</type></link>*, 
          starting with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-set" role="function"/>gtk_container_child_set ()</title>
<indexterm><primary>gtk_container_child_set</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_child_set             (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *first_prop_name,
                                                         ...);</programlisting>
<para>
Sets one or more child properties for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_prop_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated list of property names and values, starting
          with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-get-property" role="function"/>gtk_container_child_get_property ()</title>
<indexterm><primary>gtk_container_child_get_property</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_child_get_property    (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Gets the value of a child property for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the property to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> a location to return the value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-set-property" role="function"/>gtk_container_child_set_property ()</title>
<indexterm><primary>gtk_container_child_set_property</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_child_set_property    (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Sets a child property for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> the value to set the property to
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-get-valist" role="function"/>gtk_container_child_get_valist ()</title>
<indexterm><primary>gtk_container_child_get_valist</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_child_get_valist      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         <link linkend="va-list">va_list</link> var_args);</programlisting>
<para>
Gets the values of one or more child properties for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first property to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>var_args</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated list of property names and <link linkend="GValue"><type>GValue</type></link>*, 
          starting with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-set-valist" role="function"/>gtk_container_child_set_valist ()</title>
<indexterm><primary>gtk_container_child_set_valist</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_child_set_valist      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         <link linkend="va-list">va_list</link> var_args);</programlisting>
<para>
Sets one or more child properties for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>var_args</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated list of property names and values, starting
          with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-forall" role="function"/>gtk_container_forall ()</title>
<indexterm><primary>gtk_container_forall</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_forall                (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkCallback">GtkCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> callback_data);</programlisting>
<para>
Invokes <parameter>callback</parameter> on each child of <parameter>container</parameter>, including children
that are considered "internal" (implementation details of the
container). "Internal" children generally weren't added by the user
of the container, but were added by the container implementation
itself.  Most applications should use <link linkend="gtk-container-foreach"><function>gtk_container_foreach()</function></link>,
rather than <link linkend="gtk-container-forall"><function>gtk_container_forall()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> a callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback_data</parameter>&nbsp;:</term>
<listitem><simpara> callback user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-border-width" role="function"/>gtk_container_get_border_width ()</title>
<indexterm><primary>gtk_container_get_border_width</primary></indexterm><programlisting><link linkend="guint">guint</link>               gtk_container_get_border_width      (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Retrieves the border width of the container. See
<link linkend="gtk-container-set-border-width"><function>gtk_container_set_border_width()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the current border width
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-border-width" role="function"/>gtk_container_set_border_width ()</title>
<indexterm><primary>gtk_container_set_border_width</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_set_border_width      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="guint">guint</link> border_width);</programlisting>
<para>
Sets the border width of the container.
</para>
<para>
The border width of a container is the amount of space to leave
around the outside of the container. The only exception to this is
<link linkend="GtkWindow"><type>GtkWindow</type></link>; because toplevel windows can't leave space outside,
they leave the space inside. The border is added on all sides of
the container. To add space to only one side, one approach is to
create a <link linkend="GtkAlignment"><type>GtkAlignment</type></link> widget, call <link linkend="gtk-widget-set-usize"><function>gtk_widget_set_usize()</function></link> to give
it a size, and place it on the side of the container as a spacer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>border_width</parameter>&nbsp;:</term>
<listitem><simpara> amount of blank space to leave <emphasis>outside</emphasis> the container.
  Valid values are in the range 0-65535 pixels.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-propagate-expose" role="function"/>gtk_container_propagate_expose ()</title>
<indexterm><primary>gtk_container_propagate_expose</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_propagate_expose      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GtkWidget">GtkWidget</link> *child,
                                                         <link linkend="GdkEventExpose">GdkEventExpose</link> *event);</programlisting>
<para>
When a container receives an expose event, it must send synthetic
expose events to all children that don't have their own <link linkend="GdkWindows"><type>GdkWindows</type></link>.
This function provides a convenient way of doing this. A container,
when it receives an expose event, calls <link linkend="gtk-container-propagate-expose"><function>gtk_container_propagate_expose()</function></link> 
once for each child, passing in the event the container received.
</para>
<para>
<link linkend="gtk-container-propagate-expose"><function>gtk_container_propagate_expose()</function></link> takes care of deciding whether
an expose event needs to be sent to the child, intersecting
the event's area with the child area, and sending the event.
</para>
<para>
In most cases, a container can simply either simply inherit the
::expose implementation from <link linkend="GtkContainer"><type>GtkContainer</type></link>, or, do some drawing 
and then chain to the ::expose implementation from <link linkend="GtkContainer"><type>GtkContainer</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a expose event sent to container
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-focus-chain" role="function"/>gtk_container_get_focus_chain ()</title>
<indexterm><primary>gtk_container_get_focus_chain</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_container_get_focus_chain       (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GList">GList</link> **focusable_widgets);</programlisting>
<para>
Retrieves the focus chain of the container, if one has been
set explicitly. If no focus chain has been explicitly
set, GTK+ computes the focus chain based on the positions
of the children. In that case, GTK+ stores <link linkend="NULL:CAPS"><literal>NULL</literal></link> in
<parameter>focusable_widgets</parameter> and returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>         a <link linkend="GtkContainer"><type>GtkContainer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>focusable_widgets</parameter>&nbsp;:</term>
<listitem><simpara> location to store the focus chain of the
                    container, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. You should free this list
                    using <link linkend="g-list-free"><function>g_list_free()</function></link> when you are done with it, however
                    no additional reference count is added to the
                    individual widgets in the focus chain.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the focus chain of the container 
has been set explicitly.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-focus-chain" role="function"/>gtk_container_set_focus_chain ()</title>
<indexterm><primary>gtk_container_set_focus_chain</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_set_focus_chain       (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                         <link linkend="GList">GList</link> *focusable_widgets);</programlisting>
<para>
Sets a focus chain, overriding the one computed automatically by GTK+.
</para>
<para>
In principle each widget in the chain should be a descendant of the 
container, but this is not enforced by this method, since it's allowed 
to set the focus chain before you pack the widgets, or have a widget 
in the chain that isn't always packed. The necessary checks are done 
when the focus chain is actually traversed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>focusable_widgets</parameter>&nbsp;:</term>
<listitem><simpara> the new focus chain.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-unset-focus-chain" role="function"/>gtk_container_unset_focus_chain ()</title>
<indexterm><primary>gtk_container_unset_focus_chain</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_unset_focus_chain     (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Removes a focus chain explicitly set with <link linkend="gtk-container-set-focus-chain"><function>gtk_container_set_focus_chain()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-class-find-child-property" role="function"/>gtk_container_class_find_child_property ()</title>
<indexterm><primary>gtk_container_class_find_child_property</primary></indexterm><programlisting><link linkend="GParamSpec">GParamSpec</link>*         gtk_container_class_find_child_property
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cclass,
                                                         const <link linkend="gchar">gchar</link> *property_name);</programlisting>
<para>
Finds a child property of a container class by name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cclass</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainerClass"><type>GtkContainerClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the child property to find
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="GParamSpec"><type>GParamSpec</type></link> of the child property or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>class</parameter> has no
  child property with that name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-class-install-child-property" role="function"/>gtk_container_class_install_child_property ()</title>
<indexterm><primary>gtk_container_class_install_child_property</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_container_class_install_child_property
                                                        (<link linkend="GtkContainerClass">GtkContainerClass</link> *cclass,
                                                         <link linkend="guint">guint</link> property_id,
                                                         <link linkend="GParamSpec">GParamSpec</link> *pspec);</programlisting>
<para>
Installs a child property on a container class.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cclass</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainerClass"><type>GtkContainerClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_id</parameter>&nbsp;:</term>
<listitem><simpara> the id for the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pspec</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GParamSpec"><type>GParamSpec</type></link> for the property
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-class-list-child-properties" role="function"/>gtk_container_class_list_child_properties ()</title>
<indexterm><primary>gtk_container_class_list_child_properties</primary></indexterm><programlisting><link linkend="GParamSpec">GParamSpec</link>**        gtk_container_class_list_child_properties
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cclass,
                                                         <link linkend="guint">guint</link> *n_properties);</programlisting>
<para>
Returns all child properties of a container class.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cclass</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainerClass"><type>GtkContainerClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_properties</parameter>&nbsp;:</term>
<listitem><simpara> location to return the number of child properties found
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated array of <link linkend="GParamSpec"><type>GParamSpec</type></link>*. The array must be 
          freed with <link linkend="g-free"><function>g_free()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2><title><anchor id="GtkContainer--border-width"/>The :<literal>border-width</literal> property</title>
<indexterm><primary>GtkContainer:border-width</primary></indexterm><programlisting>  border-width             <link linkend="guint">guint</link>                 : Read / Write</programlisting>
<para>The width of the empty border outside the containers children.</para><para>Allowed values: &lt;= G_MAXINT</para>
<para>Default value: 0</para>
</refsect2>
<refsect2><title><anchor id="GtkContainer--child"/>The :<literal>child</literal> property</title>
<indexterm><primary>GtkContainer:child</primary></indexterm><programlisting>  child                    <link linkend="GtkWidget">GtkWidget</link>             : Write</programlisting>
<para>Can be used to add a new child to the container.</para></refsect2>
<refsect2><title><anchor id="GtkContainer--resize-mode"/>The :<literal>resize-mode</literal> property</title>
<indexterm><primary>GtkContainer:resize-mode</primary></indexterm><programlisting>  resize-mode              <link linkend="GtkResizeMode">GtkResizeMode</link>         : Read / Write</programlisting>
<para>Specify how resize events are handled.</para><para>Default value: GTK_RESIZE_PARENT</para>
</refsect2>

</refsect1>

<refsect1 role="signals">
<title role="signals.title">Signal Details</title>
<refsect2><title><anchor id="GtkContainer-add"/>The <literal>::add</literal> signal</title>
<indexterm><primary>GtkContainer::add</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                        <link linkend="GtkWidget">GtkWidget</link>    *widget,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run First</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="GtkContainer-check-resize"/>The <literal>::check-resize</literal> signal</title>
<indexterm><primary>GtkContainer::check-resize</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="GtkContainer-remove"/>The <literal>::remove</literal> signal</title>
<indexterm><primary>GtkContainer::remove</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                        <link linkend="GtkWidget">GtkWidget</link>    *widget,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run First</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="GtkContainer-set-focus-child"/>The <literal>::set-focus-child</literal> signal</title>
<indexterm><primary>GtkContainer::set-focus-child</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                                        <link linkend="GtkWidget">GtkWidget</link>    *widget,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run First</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
