<refentry id="gtk-GtkTextIter">
<refmeta>
<refentrytitle role="top_of_page">GtkTextIter</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GTK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GtkTextIter</refname>
<refpurpose>Text buffer iterator</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;gtk/gtk.h&gt;


                    <link linkend="GtkTextIter">GtkTextIter</link>;
<link linkend="GtkTextBuffer">GtkTextBuffer</link>*      <link linkend="gtk-text-iter-get-buffer">gtk_text_iter_get_buffer</link>            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="GtkTextIter">GtkTextIter</link>*        <link linkend="gtk-text-iter-copy">gtk_text_iter_copy</link>                  (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="void">void</link>                <link linkend="gtk-text-iter-free">gtk_text_iter_free</link>                  (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gint">gint</link>                <link linkend="gtk-text-iter-get-offset">gtk_text_iter_get_offset</link>            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gint">gint</link>                <link linkend="gtk-text-iter-get-line">gtk_text_iter_get_line</link>              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gint">gint</link>                <link linkend="gtk-text-iter-get-line-offset">gtk_text_iter_get_line_offset</link>       (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gint">gint</link>                <link linkend="gtk-text-iter-get-line-index">gtk_text_iter_get_line_index</link>        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gint">gint</link>                <link linkend="gtk-text-iter-get-visible-line-index">gtk_text_iter_get_visible_line_index</link>
                                                        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gint">gint</link>                <link linkend="gtk-text-iter-get-visible-line-offset">gtk_text_iter_get_visible_line_offset</link>
                                                        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gunichar">gunichar</link>            <link linkend="gtk-text-iter-get-char">gtk_text_iter_get_char</link>              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gchar">gchar</link>*              <link linkend="gtk-text-iter-get-slice">gtk_text_iter_get_slice</link>             (const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);
<link linkend="gchar">gchar</link>*              <link linkend="gtk-text-iter-get-text">gtk_text_iter_get_text</link>              (const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);
<link linkend="gchar">gchar</link>*              <link linkend="gtk-text-iter-get-visible-slice">gtk_text_iter_get_visible_slice</link>     (const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);
<link linkend="gchar">gchar</link>*              <link linkend="gtk-text-iter-get-visible-text">gtk_text_iter_get_visible_text</link>      (const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);
<link linkend="GdkPixbuf">GdkPixbuf</link>*          <link linkend="gtk-text-iter-get-pixbuf">gtk_text_iter_get_pixbuf</link>            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="GSList">GSList</link>*             <link linkend="gtk-text-iter-get-marks">gtk_text_iter_get_marks</link>             (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="GSList">GSList</link>*             <link linkend="gtk-text-iter-get-toggled-tags">gtk_text_iter_get_toggled_tags</link>      (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gboolean">gboolean</link> toggled_on);
<link linkend="GtkTextChildAnchor">GtkTextChildAnchor</link>* <link linkend="gtk-text-iter-get-child-anchor">gtk_text_iter_get_child_anchor</link>      (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-begins-tag">gtk_text_iter_begins_tag</link>            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-ends-tag">gtk_text_iter_ends_tag</link>              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-toggles-tag">gtk_text_iter_toggles_tag</link>           (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-has-tag">gtk_text_iter_has_tag</link>               (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);
<link linkend="GSList">GSList</link>*             <link linkend="gtk-text-iter-get-tags">gtk_text_iter_get_tags</link>              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-editable">gtk_text_iter_editable</link>              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gboolean">gboolean</link> default_setting);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-can-insert">gtk_text_iter_can_insert</link>            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gboolean">gboolean</link> default_editability);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-starts-word">gtk_text_iter_starts_word</link>           (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-ends-word">gtk_text_iter_ends_word</link>             (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-inside-word">gtk_text_iter_inside_word</link>           (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-starts-line">gtk_text_iter_starts_line</link>           (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-ends-line">gtk_text_iter_ends_line</link>             (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-starts-sentence">gtk_text_iter_starts_sentence</link>       (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-ends-sentence">gtk_text_iter_ends_sentence</link>         (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-inside-sentence">gtk_text_iter_inside_sentence</link>       (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-is-cursor-position">gtk_text_iter_is_cursor_position</link>    (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gint">gint</link>                <link linkend="gtk-text-iter-get-chars-in-line">gtk_text_iter_get_chars_in_line</link>     (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gint">gint</link>                <link linkend="gtk-text-iter-get-bytes-in-line">gtk_text_iter_get_bytes_in_line</link>     (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-get-attributes">gtk_text_iter_get_attributes</link>        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextAttributes">GtkTextAttributes</link> *values);
<link linkend="PangoLanguage">PangoLanguage</link>*      <link linkend="gtk-text-iter-get-language">gtk_text_iter_get_language</link>          (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-is-end">gtk_text_iter_is_end</link>                (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-is-start">gtk_text_iter_is_start</link>              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-char">gtk_text_iter_forward_char</link>          (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-char">gtk_text_iter_backward_char</link>         (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-chars">gtk_text_iter_forward_chars</link>         (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-chars">gtk_text_iter_backward_chars</link>        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-line">gtk_text_iter_forward_line</link>          (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-line">gtk_text_iter_backward_line</link>         (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-lines">gtk_text_iter_forward_lines</link>         (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-lines">gtk_text_iter_backward_lines</link>        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-word-ends">gtk_text_iter_forward_word_ends</link>     (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-word-starts">gtk_text_iter_backward_word_starts</link>  (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-word-end">gtk_text_iter_forward_word_end</link>      (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-word-start">gtk_text_iter_backward_word_start</link>   (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-cursor-position">gtk_text_iter_forward_cursor_position</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-cursor-position">gtk_text_iter_backward_cursor_position</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-cursor-positions">gtk_text_iter_forward_cursor_positions</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-cursor-positions">gtk_text_iter_backward_cursor_positions</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-sentence-start">gtk_text_iter_backward_sentence_start</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-sentence-starts">gtk_text_iter_backward_sentence_starts</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-sentence-end">gtk_text_iter_forward_sentence_end</link>  (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-sentence-ends">gtk_text_iter_forward_sentence_ends</link> (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-visible-word-ends">gtk_text_iter_forward_visible_word_ends</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-visible-word-starts">gtk_text_iter_backward_visible_word_starts</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-visible-word-end">gtk_text_iter_forward_visible_word_end</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-visible-word-start">gtk_text_iter_backward_visible_word_start</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-visible-cursor-position">gtk_text_iter_forward_visible_cursor_position</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-visible-cursor-position">gtk_text_iter_backward_visible_cursor_position</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-visible-cursor-positions">gtk_text_iter_forward_visible_cursor_positions</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-visible-cursor-positions">gtk_text_iter_backward_visible_cursor_positions</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-visible-line">gtk_text_iter_forward_visible_line</link>  (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-visible-line">gtk_text_iter_backward_visible_line</link> (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-visible-lines">gtk_text_iter_forward_visible_lines</link> (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-visible-lines">gtk_text_iter_backward_visible_lines</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);
<link linkend="void">void</link>                <link linkend="gtk-text-iter-set-offset">gtk_text_iter_set_offset</link>            (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> char_offset);
<link linkend="void">void</link>                <link linkend="gtk-text-iter-set-line">gtk_text_iter_set_line</link>              (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> line_number);
<link linkend="void">void</link>                <link linkend="gtk-text-iter-set-line-offset">gtk_text_iter_set_line_offset</link>       (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> char_on_line);
<link linkend="void">void</link>                <link linkend="gtk-text-iter-set-line-index">gtk_text_iter_set_line_index</link>        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> byte_on_line);
<link linkend="void">void</link>                <link linkend="gtk-text-iter-set-visible-line-index">gtk_text_iter_set_visible_line_index</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> byte_on_line);
<link linkend="void">void</link>                <link linkend="gtk-text-iter-set-visible-line-offset">gtk_text_iter_set_visible_line_offset</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> char_on_line);
<link linkend="void">void</link>                <link linkend="gtk-text-iter-forward-to-end">gtk_text_iter_forward_to_end</link>        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-to-line-end">gtk_text_iter_forward_to_line_end</link>   (<link linkend="GtkTextIter">GtkTextIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-to-tag-toggle">gtk_text_iter_forward_to_tag_toggle</link> (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-to-tag-toggle">gtk_text_iter_backward_to_tag_toggle</link>
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);
<link linkend="gboolean">gboolean</link>            (<link linkend="GtkTextCharPredicate">*GtkTextCharPredicate</link>)             (<link linkend="gunichar">gunichar</link> ch,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-find-char">gtk_text_iter_forward_find_char</link>     (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextCharPredicate">GtkTextCharPredicate</link> pred,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *limit);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-find-char">gtk_text_iter_backward_find_char</link>    (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextCharPredicate">GtkTextCharPredicate</link> pred,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *limit);
enum                <link linkend="GtkTextSearchFlags">GtkTextSearchFlags</link>;
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-forward-search">gtk_text_iter_forward_search</link>        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         const <link linkend="gchar">gchar</link> *str,
                                                         <link linkend="GtkTextSearchFlags">GtkTextSearchFlags</link> flags,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *match_start,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *match_end,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *limit);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-backward-search">gtk_text_iter_backward_search</link>       (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         const <link linkend="gchar">gchar</link> *str,
                                                         <link linkend="GtkTextSearchFlags">GtkTextSearchFlags</link> flags,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *match_start,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *match_end,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *limit);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-equal">gtk_text_iter_equal</link>                 (const <link linkend="GtkTextIter">GtkTextIter</link> *lhs,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *rhs);
<link linkend="gint">gint</link>                <link linkend="gtk-text-iter-compare">gtk_text_iter_compare</link>               (const <link linkend="GtkTextIter">GtkTextIter</link> *lhs,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *rhs);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-text-iter-in-range">gtk_text_iter_in_range</link>              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);
<link linkend="void">void</link>                <link linkend="gtk-text-iter-order">gtk_text_iter_order</link>                 (<link linkend="GtkTextIter">GtkTextIter</link> *first,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *second);


</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
You may wish to begin by reading the <link linkend="TextWidget">text widget
conceptual overview</link> which gives an overview of all the objects and data
types related to the text widget and how they work together.
</para>

<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="GtkTextIter" role="struct"/>GtkTextIter</title>
<indexterm><primary>GtkTextIter</primary></indexterm><programlisting>typedef struct {
  /* GtkTextIter is an opaque datatype; ignore all these fields.
   * Initialize the iter with gtk_text_buffer_get_iter_*
   * functions
   */
} GtkTextIter;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-buffer" role="function"/>gtk_text_iter_get_buffer ()</title>
<indexterm><primary>gtk_text_iter_get_buffer</primary></indexterm><programlisting><link linkend="GtkTextBuffer">GtkTextBuffer</link>*      gtk_text_iter_get_buffer            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the <link linkend="GtkTextBuffer"><type>GtkTextBuffer</type></link> this iterator is associated with.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the buffer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-copy" role="function"/>gtk_text_iter_copy ()</title>
<indexterm><primary>gtk_text_iter_copy</primary></indexterm><programlisting><link linkend="GtkTextIter">GtkTextIter</link>*        gtk_text_iter_copy                  (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Creates a dynamically-allocated copy of an iterator. This function
is not useful in applications, because iterators can be copied with a
simple assignment (<literal>GtkTextIter i = j;</literal>). The
function is used by language bindings.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a copy of the <parameter>iter</parameter>, free with <link linkend="gtk-text-iter-free"><function>gtk_text_iter_free()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-free" role="function"/>gtk_text_iter_free ()</title>
<indexterm><primary>gtk_text_iter_free</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_text_iter_free                  (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Free an iterator allocated on the heap. This function
is intended for use in language bindings, and is not
especially useful for applications, because iterators can
simply be allocated on the stack.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a dynamically-allocated iterator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-offset" role="function"/>gtk_text_iter_get_offset ()</title>
<indexterm><primary>gtk_text_iter_get_offset</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_text_iter_get_offset            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the character offset of an iterator.
Each character in a <link linkend="GtkTextBuffer"><type>GtkTextBuffer</type></link> has an offset,
starting with 0 for the first character in the buffer.
Use <link linkend="gtk-text-buffer-get-iter-at-offset"><function>gtk_text_buffer_get_iter_at_offset()</function></link> to convert an
offset back into an iterator.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a character offset
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-line" role="function"/>gtk_text_iter_get_line ()</title>
<indexterm><primary>gtk_text_iter_get_line</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_text_iter_get_line              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the line number containing the iterator. Lines in
a <link linkend="GtkTextBuffer"><type>GtkTextBuffer</type></link> are numbered beginning with 0 for the first
line in the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a line number
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-line-offset" role="function"/>gtk_text_iter_get_line_offset ()</title>
<indexterm><primary>gtk_text_iter_get_line_offset</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_text_iter_get_line_offset       (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the character offset of the iterator,
counting from the start of a newline-terminated line.
The first character on the line has offset 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> offset from start of line
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-line-index" role="function"/>gtk_text_iter_get_line_index ()</title>
<indexterm><primary>gtk_text_iter_get_line_index</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_text_iter_get_line_index        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the byte index of the iterator, counting
from the start of a newline-terminated line.
Remember that <link linkend="GtkTextBuffer"><type>GtkTextBuffer</type></link> encodes text in
UTF-8, and that characters can require a variable
number of bytes to represent.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> distance from start of line, in bytes
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-visible-line-index" role="function"/>gtk_text_iter_get_visible_line_index ()</title>
<indexterm><primary>gtk_text_iter_get_visible_line_index</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_text_iter_get_visible_line_index
                                                        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the number of bytes from the start of the
line to the given <parameter>iter</parameter>, not counting bytes that
are invisible due to tags with the "invisible" flag
toggled on.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> byte index of <parameter>iter</parameter> with respect to the start of the line
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-visible-line-offset" role="function"/>gtk_text_iter_get_visible_line_offset ()</title>
<indexterm><primary>gtk_text_iter_get_visible_line_offset</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_text_iter_get_visible_line_offset
                                                        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the offset in characters from the start of the
line to the given <parameter>iter</parameter>, not counting characters that
are invisible due to tags with the "invisible" flag
toggled on.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> offset in visible characters from the start of the line 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-char" role="function"/>gtk_text_iter_get_char ()</title>
<indexterm><primary>gtk_text_iter_get_char</primary></indexterm><programlisting><link linkend="gunichar">gunichar</link>            gtk_text_iter_get_char              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the Unicode character at this iterator.  (Equivalent to
operator* on a C++ iterator.)  If the element at this iterator is a
non-character element, such as an image embedded in the buffer, the
Unicode "unknown" character 0xFFFC is returned. If invoked on
the end iterator, zero is returned; zero is not a valid Unicode character.
So you can write a loop which ends when <link linkend="gtk-text-iter-get-char"><function>gtk_text_iter_get_char()</function></link>
returns 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a Unicode character, or 0 if <parameter>iter</parameter> is not dereferenceable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-slice" role="function"/>gtk_text_iter_get_slice ()</title>
<indexterm><primary>gtk_text_iter_get_slice</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gtk_text_iter_get_slice             (const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);</programlisting>
<para>
Returns the text in the given range. A "slice" is an array of
characters encoded in UTF-8 format, including the Unicode "unknown"
character 0xFFFC for iterable non-character elements in the buffer,
such as images.  Because images are encoded in the slice, byte and
character offsets in the returned array will correspond to byte
offsets in the text buffer. Note that 0xFFFC can occur in normal
text as well, so it is not a reliable indicator that a pixbuf or
widget is in the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>start</parameter>&nbsp;:</term>
<listitem><simpara> iterator at start of a range
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&nbsp;:</term>
<listitem><simpara> iterator at end of a range
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> slice of text from the buffer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-text" role="function"/>gtk_text_iter_get_text ()</title>
<indexterm><primary>gtk_text_iter_get_text</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gtk_text_iter_get_text              (const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);</programlisting>
<para>
Returns <emphasis>text</emphasis> in the given range.  If the range
contains non-text elements such as images, the character and byte
offsets in the returned string will not correspond to character and
byte offsets in the buffer. If you want offsets to correspond, see
<link linkend="gtk-text-iter-get-slice"><function>gtk_text_iter_get_slice()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>start</parameter>&nbsp;:</term>
<listitem><simpara> iterator at start of a range
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&nbsp;:</term>
<listitem><simpara> iterator at end of a range
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> array of characters from the buffer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-visible-slice" role="function"/>gtk_text_iter_get_visible_slice ()</title>
<indexterm><primary>gtk_text_iter_get_visible_slice</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gtk_text_iter_get_visible_slice     (const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);</programlisting>
<para>
Like <link linkend="gtk-text-iter-get-slice"><function>gtk_text_iter_get_slice()</function></link>, but invisible text is not included.
Invisible text is usually invisible because a <link linkend="GtkTextTag"><type>GtkTextTag</type></link> with the
"invisible" attribute turned on has been applied to it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>start</parameter>&nbsp;:</term>
<listitem><simpara> iterator at start of range
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&nbsp;:</term>
<listitem><simpara> iterator at end of range
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> slice of text from the buffer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-visible-text" role="function"/>gtk_text_iter_get_visible_text ()</title>
<indexterm><primary>gtk_text_iter_get_visible_text</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gtk_text_iter_get_visible_text      (const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);</programlisting>
<para>
Like <link linkend="gtk-text-iter-get-text"><function>gtk_text_iter_get_text()</function></link>, but invisible text is not included.
Invisible text is usually invisible because a <link linkend="GtkTextTag"><type>GtkTextTag</type></link> with the
"invisible" attribute turned on has been applied to it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>start</parameter>&nbsp;:</term>
<listitem><simpara> iterator at start of range
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&nbsp;:</term>
<listitem><simpara> iterator at end of range
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> string containing visible text in the range
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-pixbuf" role="function"/>gtk_text_iter_get_pixbuf ()</title>
<indexterm><primary>gtk_text_iter_get_pixbuf</primary></indexterm><programlisting><link linkend="GdkPixbuf">GdkPixbuf</link>*          gtk_text_iter_get_pixbuf            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
If the element at <parameter>iter</parameter> is a pixbuf, the pixbuf is returned
(with no new reference count added). Otherwise,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> is returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the pixbuf at <parameter>iter</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-marks" role="function"/>gtk_text_iter_get_marks ()</title>
<indexterm><primary>gtk_text_iter_get_marks</primary></indexterm><programlisting><link linkend="GSList">GSList</link>*             gtk_text_iter_get_marks             (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns a list of all <link linkend="GtkTextMark"><type>GtkTextMark</type></link> at this location. Because marks
are not iterable (they don't take up any "space" in the buffer,
they are just marks in between iterable locations), multiple marks
can exist in the same place. The returned list is not in any
meaningful order.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> list of <link linkend="GtkTextMark"><type>GtkTextMark</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-toggled-tags" role="function"/>gtk_text_iter_get_toggled_tags ()</title>
<indexterm><primary>gtk_text_iter_get_toggled_tags</primary></indexterm><programlisting><link linkend="GSList">GSList</link>*             gtk_text_iter_get_toggled_tags      (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gboolean">gboolean</link> toggled_on);</programlisting>
<para>
Returns a list of <link linkend="GtkTextTag"><type>GtkTextTag</type></link> that are toggled on or off at this
point.  (If <parameter>toggled_on</parameter> is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, the list contains tags that are
toggled on.) If a tag is toggled on at <parameter>iter</parameter>, then some non-empty
range of characters following <parameter>iter</parameter> has that tag applied to it.  If
a tag is toggled off, then some non-empty range following <parameter>iter</parameter>
does <emphasis>not</emphasis> have the tag applied to it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>toggled_on</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> to get toggled-on tags
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> tags toggled at this point
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-child-anchor" role="function"/>gtk_text_iter_get_child_anchor ()</title>
<indexterm><primary>gtk_text_iter_get_child_anchor</primary></indexterm><programlisting><link linkend="GtkTextChildAnchor">GtkTextChildAnchor</link>* gtk_text_iter_get_child_anchor      (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
If the location at <parameter>iter</parameter> contains a child anchor, the
anchor is returned (with no new reference count added). Otherwise,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> is returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the anchor at <parameter>iter</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-begins-tag" role="function"/>gtk_text_iter_begins_tag ()</title>
<indexterm><primary>gtk_text_iter_begins_tag</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_begins_tag            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);</programlisting>
<para>
Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>tag</parameter> is toggled on at exactly this point. If <parameter>tag</parameter>
is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if any tag is toggled on at this point. Note
that the <link linkend="gtk-text-iter-begins-tag"><function>gtk_text_iter_begins_tag()</function></link> returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is the
<emphasis>start</emphasis> of the tagged range;
<link linkend="gtk-text-iter-has-tag"><function>gtk_text_iter_has_tag()</function></link> tells you whether an iterator is
<emphasis>within</emphasis> a tagged range.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextTag"><type>GtkTextTag</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> is the start of a range tagged with <parameter>tag</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-ends-tag" role="function"/>gtk_text_iter_ends_tag ()</title>
<indexterm><primary>gtk_text_iter_ends_tag</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_ends_tag              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);</programlisting>
<para>
Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>tag</parameter> is toggled off at exactly this point. If <parameter>tag</parameter>
is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if any tag is toggled off at this point. Note
that the <link linkend="gtk-text-iter-ends-tag"><function>gtk_text_iter_ends_tag()</function></link> returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is the
<emphasis>end</emphasis> of the tagged range;
<link linkend="gtk-text-iter-has-tag"><function>gtk_text_iter_has_tag()</function></link> tells you whether an iterator is
<emphasis>within</emphasis> a tagged range.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextTag"><type>GtkTextTag</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> is the end of a range tagged with <parameter>tag</parameter>

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-toggles-tag" role="function"/>gtk_text_iter_toggles_tag ()</title>
<indexterm><primary>gtk_text_iter_toggles_tag</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_toggles_tag           (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);</programlisting>
<para>
This is equivalent to (<link linkend="gtk-text-iter-begins-tag"><function>gtk_text_iter_begins_tag()</function></link> ||
<link linkend="gtk-text-iter-ends-tag"><function>gtk_text_iter_ends_tag()</function></link>), i.e. it tells you whether a range with
<parameter>tag</parameter> applied to it begins <emphasis>or</emphasis> ends at <parameter>iter</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextTag"><type>GtkTextTag</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>tag</parameter> is toggled on or off at <parameter>iter</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-has-tag" role="function"/>gtk_text_iter_has_tag ()</title>
<indexterm><primary>gtk_text_iter_has_tag</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_has_tag               (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);</programlisting>
<para>
Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is within a range tagged with <parameter>tag</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextTag"><type>GtkTextTag</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> is tagged with <parameter>tag</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-tags" role="function"/>gtk_text_iter_get_tags ()</title>
<indexterm><primary>gtk_text_iter_get_tags</primary></indexterm><programlisting><link linkend="GSList">GSList</link>*             gtk_text_iter_get_tags              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns a list of tags that apply to <parameter>iter</parameter>, in ascending order of
priority (highest-priority tags are last). The <link linkend="GtkTextTag"><type>GtkTextTag</type></link> in the
list don't have a reference added, but you have to free the list
itself.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> list of <link linkend="GtkTextTag"><type>GtkTextTag</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-editable" role="function"/>gtk_text_iter_editable ()</title>
<indexterm><primary>gtk_text_iter_editable</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_editable              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gboolean">gboolean</link> default_setting);</programlisting>
<para>
Returns whether the character at <parameter>iter</parameter> is within an editable region
of text.  Non-editable text is "locked" and can't be changed by the
user via <link linkend="GtkTextView"><type>GtkTextView</type></link>. This function is simply a convenience
wrapper around <link linkend="gtk-text-iter-get-attributes"><function>gtk_text_iter_get_attributes()</function></link>. If no tags applied
to this text affect editability, <parameter>default_setting</parameter> will be returned.
</para>
<para>
You don't want to use this function to decide whether text can be
inserted at <parameter>iter</parameter>, because for insertion you don't want to know
whether the char at <parameter>iter</parameter> is inside an editable range, you want to
know whether a new character inserted at <parameter>iter</parameter> would be inside an
editable range. Use <link linkend="gtk-text-iter-can-insert"><function>gtk_text_iter_can_insert()</function></link> to handle this
case.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>default_setting</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if text is editable by default
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> is inside an editable range
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-can-insert" role="function"/>gtk_text_iter_can_insert ()</title>
<indexterm><primary>gtk_text_iter_can_insert</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_can_insert            (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gboolean">gboolean</link> default_editability);</programlisting>
<para>
Considering the default editability of the buffer, and tags that
affect editability, determines whether text inserted at <parameter>iter</parameter> would
be editable. If text inserted at <parameter>iter</parameter> would be editable then the
user should be allowed to insert text at <parameter>iter</parameter>.
<link linkend="gtk-text-buffer-insert-interactive"><function>gtk_text_buffer_insert_interactive()</function></link> uses this function to decide
whether insertions are allowed at a given position.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>default_editability</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if text is editable by default
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether text inserted at <parameter>iter</parameter> would be editable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-starts-word" role="function"/>gtk_text_iter_starts_word ()</title>
<indexterm><primary>gtk_text_iter_starts_word</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_starts_word           (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Determines whether <parameter>iter</parameter> begins a natural-language word.  Word
breaks are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is at the start of a word
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-ends-word" role="function"/>gtk_text_iter_ends_word ()</title>
<indexterm><primary>gtk_text_iter_ends_word</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_ends_word             (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Determines whether <parameter>iter</parameter> ends a natural-language word.  Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is at the end of a word
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-inside-word" role="function"/>gtk_text_iter_inside_word ()</title>
<indexterm><primary>gtk_text_iter_inside_word</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_inside_word           (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Determines whether <parameter>iter</parameter> is inside a natural-language word (as
opposed to say inside some whitespace).  Word breaks are determined
by Pango and should be correct for nearly any language (if not, the
correct fix would be to the Pango word break algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is inside a word
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-starts-line" role="function"/>gtk_text_iter_starts_line ()</title>
<indexterm><primary>gtk_text_iter_starts_line</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_starts_line           (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> begins a paragraph,
i.e. if <link linkend="gtk-text-iter-get-line-offset"><function>gtk_text_iter_get_line_offset()</function></link> would return 0.
However this function is potentially more efficient than
<link linkend="gtk-text-iter-get-line-offset"><function>gtk_text_iter_get_line_offset()</function></link> because it doesn't have to compute
the offset, it just has to see whether it's 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> begins a line
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-ends-line" role="function"/>gtk_text_iter_ends_line ()</title>
<indexterm><primary>gtk_text_iter_ends_line</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_ends_line             (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> points to the start of the paragraph
delimiter characters for a line (delimiters will be either a
newline, a carriage return, a carriage return followed by a
newline, or a Unicode paragraph separator character). Note that an
iterator pointing to the \n of a \r\n pair will not be counted as
the end of a line, the line ends before the \r. The end iterator is
considered to be at the end of a line, even though there are no
paragraph delimiter chars there.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> is at the end of a line
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-starts-sentence" role="function"/>gtk_text_iter_starts_sentence ()</title>
<indexterm><primary>gtk_text_iter_starts_sentence</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_starts_sentence       (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Determines whether <parameter>iter</parameter> begins a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is at the start of a sentence.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-ends-sentence" role="function"/>gtk_text_iter_ends_sentence ()</title>
<indexterm><primary>gtk_text_iter_ends_sentence</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_ends_sentence         (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Determines whether <parameter>iter</parameter> ends a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is at the end of a sentence.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-inside-sentence" role="function"/>gtk_text_iter_inside_sentence ()</title>
<indexterm><primary>gtk_text_iter_inside_sentence</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_inside_sentence       (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Determines whether <parameter>iter</parameter> is inside a sentence (as opposed to in
between two sentences, e.g. after a period and before the first
letter of the next sentence).  Sentence boundaries are determined
by Pango and should be correct for nearly any language (if not, the
correct fix would be to the Pango text boundary algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is inside a sentence.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-is-cursor-position" role="function"/>gtk_text_iter_is_cursor_position ()</title>
<indexterm><primary>gtk_text_iter_is_cursor_position</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_is_cursor_position    (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
See <link linkend="gtk-text-iter-forward-cursor-position"><function>gtk_text_iter_forward_cursor_position()</function></link> or <link linkend="PangoLogAttr"><type>PangoLogAttr</type></link> or
<link linkend="pango-break"><function>pango_break()</function></link> for details on what a cursor position is.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the cursor can be placed at <parameter>iter</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-chars-in-line" role="function"/>gtk_text_iter_get_chars_in_line ()</title>
<indexterm><primary>gtk_text_iter_get_chars_in_line</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_text_iter_get_chars_in_line     (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the number of characters in the line containing <parameter>iter</parameter>,
including the paragraph delimiters.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> number of characters in the line
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-bytes-in-line" role="function"/>gtk_text_iter_get_bytes_in_line ()</title>
<indexterm><primary>gtk_text_iter_get_bytes_in_line</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_text_iter_get_bytes_in_line     (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns the number of bytes in the line containing <parameter>iter</parameter>,
including the paragraph delimiters.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> number of bytes in the line
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-attributes" role="function"/>gtk_text_iter_get_attributes ()</title>
<indexterm><primary>gtk_text_iter_get_attributes</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_get_attributes        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextAttributes">GtkTextAttributes</link> *values);</programlisting>
<para>
Computes the effect of any tags applied to this spot in the
text. The <parameter>values</parameter> parameter should be initialized to the default
settings you wish to use if no tags are in effect. You'd typically
obtain the defaults from <link linkend="gtk-text-view-get-default-attributes"><function>gtk_text_view_get_default_attributes()</function></link>.
</para>
<para>
<link linkend="gtk-text-iter-get-attributes"><function>gtk_text_iter_get_attributes()</function></link> will modify <parameter>values</parameter>, applying the
effects of any tags present at <parameter>iter</parameter>. If any tags affected <parameter>values</parameter>,
the function returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>values</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextAttributes"><type>GtkTextAttributes</type></link> to be filled in
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>values</parameter> was modified
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-get-language" role="function"/>gtk_text_iter_get_language ()</title>
<indexterm><primary>gtk_text_iter_get_language</primary></indexterm><programlisting><link linkend="PangoLanguage">PangoLanguage</link>*      gtk_text_iter_get_language          (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
A convenience wrapper around <link linkend="gtk-text-iter-get-attributes"><function>gtk_text_iter_get_attributes()</function></link>,
which returns the language in effect at <parameter>iter</parameter>. If no tags affecting
language apply to <parameter>iter</parameter>, the return value is identical to that of
<link linkend="gtk-get-default-language"><function>gtk_get_default_language()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> language in effect at <parameter>iter</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-is-end" role="function"/>gtk_text_iter_is_end ()</title>
<indexterm><primary>gtk_text_iter_is_end</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_is_end                (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is the end iterator, i.e. one past the last
dereferenceable iterator in the buffer. <link linkend="gtk-text-iter-is-end"><function>gtk_text_iter_is_end()</function></link> is
the most efficient way to check whether an iterator is the end
iterator.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> is the end iterator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-is-start" role="function"/>gtk_text_iter_is_start ()</title>
<indexterm><primary>gtk_text_iter_is_start</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_is_start              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is the first iterator in the buffer, that is
if <parameter>iter</parameter> has a character offset of 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> is the first in the buffer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-char" role="function"/>gtk_text_iter_forward_char ()</title>
<indexterm><primary>gtk_text_iter_forward_char</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_char          (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves <parameter>iter</parameter> forward by one character offset. Note that images
embedded in the buffer occupy 1 character slot, so
<link linkend="gtk-text-iter-forward-char"><function>gtk_text_iter_forward_char()</function></link> may actually move onto an image instead
of a character, if you have images in your buffer.  If <parameter>iter</parameter> is the
end iterator or one character before it, <parameter>iter</parameter> will now point at
the end iterator, and <link linkend="gtk-text-iter-forward-char"><function>gtk_text_iter_forward_char()</function></link> returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> for
convenience when writing loops.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> moved and is dereferenceable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-char" role="function"/>gtk_text_iter_backward_char ()</title>
<indexterm><primary>gtk_text_iter_backward_char</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_char         (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves backward by one character offset. Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if movement
was possible; if <parameter>iter</parameter> was the first in the buffer (character
offset 0), <link linkend="gtk-text-iter-backward-char"><function>gtk_text_iter_backward_char()</function></link> returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> for convenience when
writing loops.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether movement was possible
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-chars" role="function"/>gtk_text_iter_forward_chars ()</title>
<indexterm><primary>gtk_text_iter_forward_chars</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_chars         (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves <parameter>count</parameter> characters if possible (if <parameter>count</parameter> would move past the
start or end of the buffer, moves to the start or end of the
buffer). The return value indicates whether the new position of
<parameter>iter</parameter> is different from its original position, and dereferenceable
(the last iterator in the buffer is not dereferenceable). If <parameter>count</parameter>
is 0, the function does nothing and returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of characters to move, may be negative
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> moved and is dereferenceable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-chars" role="function"/>gtk_text_iter_backward_chars ()</title>
<indexterm><primary>gtk_text_iter_backward_chars</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_chars        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves <parameter>count</parameter> characters backward, if possible (if <parameter>count</parameter> would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned. If <parameter>count</parameter> is 0,
the function does nothing and returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of characters to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> moved and is dereferenceable

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-line" role="function"/>gtk_text_iter_forward_line ()</title>
<indexterm><primary>gtk_text_iter_forward_line</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_line          (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves <parameter>iter</parameter> to the start of the next line. Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if there
was a next line to move to, and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if <parameter>iter</parameter> was simply moved to
the end of the buffer and is now not dereferenceable, or if <parameter>iter</parameter> was
already at the end of the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> can be dereferenced
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-line" role="function"/>gtk_text_iter_backward_line ()</title>
<indexterm><primary>gtk_text_iter_backward_line</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_line         (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves <parameter>iter</parameter> to the start of the previous line. Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if
<parameter>iter</parameter> could be moved; i.e. if <parameter>iter</parameter> was at character offset 0, this
function returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>. Therefore if <parameter>iter</parameter> was already on line 0,
but not at the start of the line, <parameter>iter</parameter> is snapped to the start of
the line and the function returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> moved
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-lines" role="function"/>gtk_text_iter_forward_lines ()</title>
<indexterm><primary>gtk_text_iter_forward_lines</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_lines         (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves <parameter>count</parameter> lines forward, if possible (if <parameter>count</parameter> would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned. If <parameter>count</parameter> is 0,
the function does nothing and returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>. If <parameter>count</parameter> is negative,
moves backward by 0 - <parameter>count</parameter> lines.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of lines to move forward
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> moved and is dereferenceable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-lines" role="function"/>gtk_text_iter_backward_lines ()</title>
<indexterm><primary>gtk_text_iter_backward_lines</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_lines        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves <parameter>count</parameter> lines backward, if possible (if <parameter>count</parameter> would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned. If <parameter>count</parameter> is 0,
the function does nothing and returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>. If <parameter>count</parameter> is negative,
moves forward by 0 - <parameter>count</parameter> lines.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of lines to move backward
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> moved and is dereferenceable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-word-ends" role="function"/>gtk_text_iter_forward_word_ends ()</title>
<indexterm><primary>gtk_text_iter_forward_word_ends</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_word_ends     (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Calls <link linkend="gtk-text-iter-forward-word-end"><function>gtk_text_iter_forward_word_end()</function></link> up to <parameter>count</parameter> times.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of times to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-word-starts" role="function"/>gtk_text_iter_backward_word_starts ()</title>
<indexterm><primary>gtk_text_iter_backward_word_starts</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_word_starts  (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Calls <link linkend="gtk-text-iter-backward-word-start"><function>gtk_text_iter_backward_word_start()</function></link> up to <parameter>count</parameter> times.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of times to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-word-end" role="function"/>gtk_text_iter_forward_word_end ()</title>
<indexterm><primary>gtk_text_iter_forward_word_end</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_word_end      (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves forward to the next word end. (If <parameter>iter</parameter> is currently on a
word end, moves forward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-word-start" role="function"/>gtk_text_iter_backward_word_start ()</title>
<indexterm><primary>gtk_text_iter_backward_word_start</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_word_start   (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves backward to the previous word start. (If <parameter>iter</parameter> is currently on a
word start, moves backward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-cursor-position" role="function"/>gtk_text_iter_forward_cursor_position ()</title>
<indexterm><primary>gtk_text_iter_forward_cursor_position</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_cursor_position
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves <parameter>iter</parameter> forward by a single cursor position. Cursor positions
are (unsurprisingly) positions where the cursor can appear. Perhaps
surprisingly, there may not be a cursor position between all
characters. The most common example for European languages would be
a carriage return/newline sequence. For some Unicode characters,
the equivalent of say the letter "a" with an accent mark will be
represented as two characters, first the letter then a "combining
mark" that causes the accent to be rendered; so the cursor can't go
between those two characters. See also the <link linkend="PangoLogAttr"><type>PangoLogAttr</type></link> structure and
<link linkend="pango-break"><function>pango_break()</function></link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we moved and the new position is dereferenceable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-cursor-position" role="function"/>gtk_text_iter_backward_cursor_position ()</title>
<indexterm><primary>gtk_text_iter_backward_cursor_position</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_cursor_position
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Like <link linkend="gtk-text-iter-forward-cursor-position"><function>gtk_text_iter_forward_cursor_position()</function></link>, but moves backward.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we moved
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-cursor-positions" role="function"/>gtk_text_iter_forward_cursor_positions ()</title>
<indexterm><primary>gtk_text_iter_forward_cursor_positions</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_cursor_positions
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves up to <parameter>count</parameter> cursor positions. See
<link linkend="gtk-text-iter-forward-cursor-position"><function>gtk_text_iter_forward_cursor_position()</function></link> for details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of positions to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we moved and the new position is dereferenceable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-cursor-positions" role="function"/>gtk_text_iter_backward_cursor_positions ()</title>
<indexterm><primary>gtk_text_iter_backward_cursor_positions</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_cursor_positions
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves up to <parameter>count</parameter> cursor positions. See
<link linkend="gtk-text-iter-forward-cursor-position"><function>gtk_text_iter_forward_cursor_position()</function></link> for details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of positions to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we moved and the new position is dereferenceable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-sentence-start" role="function"/>gtk_text_iter_backward_sentence_start ()</title>
<indexterm><primary>gtk_text_iter_backward_sentence_start</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_sentence_start
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves backward to the previous sentence start; if <parameter>iter</parameter> is already at
the start of a sentence, moves backward to the next one.  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-sentence-starts" role="function"/>gtk_text_iter_backward_sentence_starts ()</title>
<indexterm><primary>gtk_text_iter_backward_sentence_starts</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_sentence_starts
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Calls <link linkend="gtk-text-iter-backward-sentence-start"><function>gtk_text_iter_backward_sentence_start()</function></link> up to <parameter>count</parameter> times,
or until it returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>. If <parameter>count</parameter> is negative, moves forward
instead of backward.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of sentences to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-sentence-end" role="function"/>gtk_text_iter_forward_sentence_end ()</title>
<indexterm><primary>gtk_text_iter_forward_sentence_end</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_sentence_end  (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves forward to the next sentence end. (If <parameter>iter</parameter> is at the end of
a sentence, moves to the next end of sentence.)  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-sentence-ends" role="function"/>gtk_text_iter_forward_sentence_ends ()</title>
<indexterm><primary>gtk_text_iter_forward_sentence_ends</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_sentence_ends (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Calls <link linkend="gtk-text-iter-forward-sentence-end"><function>gtk_text_iter_forward_sentence_end()</function></link> <parameter>count</parameter> times (or until
<link linkend="gtk-text-iter-forward-sentence-end"><function>gtk_text_iter_forward_sentence_end()</function></link> returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>). If <parameter>count</parameter> is
negative, moves backward instead of forward.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of sentences to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-visible-word-ends" role="function" condition="since:2.4"/>gtk_text_iter_forward_visible_word_ends ()</title>
<indexterm role="2.4"><primary>gtk_text_iter_forward_visible_word_ends</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_visible_word_ends
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Calls <link linkend="gtk-text-iter-forward-visible-word-end"><function>gtk_text_iter_forward_visible_word_end()</function></link> up to <parameter>count</parameter> times.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of times to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator 

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.4
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-visible-word-starts" role="function" condition="since:2.4"/>gtk_text_iter_backward_visible_word_starts ()</title>
<indexterm role="2.4"><primary>gtk_text_iter_backward_visible_word_starts</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_visible_word_starts
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Calls <link linkend="gtk-text-iter-backward-visible-word-start"><function>gtk_text_iter_backward_visible_word_start()</function></link> up to <parameter>count</parameter> times.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of times to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator 

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.4
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-visible-word-end" role="function" condition="since:2.4"/>gtk_text_iter_forward_visible_word_end ()</title>
<indexterm role="2.4"><primary>gtk_text_iter_forward_visible_word_end</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_visible_word_end
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves forward to the next visible word end. (If <parameter>iter</parameter> is currently on a
word end, moves forward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator 

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.4
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-visible-word-start" role="function" condition="since:2.4"/>gtk_text_iter_backward_visible_word_start ()</title>
<indexterm role="2.4"><primary>gtk_text_iter_backward_visible_word_start</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_visible_word_start
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves backward to the previous visible word start. (If <parameter>iter</parameter> is currently 
on a word start, moves backward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> moved and is not the end iterator 

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.4
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-visible-cursor-position" role="function" condition="since:2.4"/>gtk_text_iter_forward_visible_cursor_position ()</title>
<indexterm role="2.4"><primary>gtk_text_iter_forward_visible_cursor_position</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_visible_cursor_position
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves <parameter>iter</parameter> forward to the next visible cursor position. See 
<link linkend="gtk-text-iter-forward-cursor-position"><function>gtk_text_iter_forward_cursor_position()</function></link> for details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we moved and the new position is dereferenceable

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.4
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-visible-cursor-position" role="function" condition="since:2.4"/>gtk_text_iter_backward_visible_cursor_position ()</title>
<indexterm role="2.4"><primary>gtk_text_iter_backward_visible_cursor_position</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_visible_cursor_position
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves <parameter>iter</parameter> forward to the previous visible cursor position. See 
<link linkend="gtk-text-iter-backward-cursor-position"><function>gtk_text_iter_backward_cursor_position()</function></link> for details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we moved and the new position is dereferenceable

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.4
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-visible-cursor-positions" role="function" condition="since:2.4"/>gtk_text_iter_forward_visible_cursor_positions ()</title>
<indexterm role="2.4"><primary>gtk_text_iter_forward_visible_cursor_positions</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_visible_cursor_positions
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves up to <parameter>count</parameter> visible cursor positions. See
<link linkend="gtk-text-iter-forward-cursor-position"><function>gtk_text_iter_forward_cursor_position()</function></link> for details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of positions to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we moved and the new position is dereferenceable

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.4
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-visible-cursor-positions" role="function" condition="since:2.4"/>gtk_text_iter_backward_visible_cursor_positions ()</title>
<indexterm role="2.4"><primary>gtk_text_iter_backward_visible_cursor_positions</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_visible_cursor_positions
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves up to <parameter>count</parameter> visible cursor positions. See
<link linkend="gtk-text-iter-backward-cursor-position"><function>gtk_text_iter_backward_cursor_position()</function></link> for details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of positions to move
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we moved and the new position is dereferenceable

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.4
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-visible-line" role="function" condition="since:2.8"/>gtk_text_iter_forward_visible_line ()</title>
<indexterm role="2.8"><primary>gtk_text_iter_forward_visible_line</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_visible_line  (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves <parameter>iter</parameter> to the start of the next visible line. Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if there
was a next line to move to, and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if <parameter>iter</parameter> was simply moved to
the end of the buffer and is now not dereferenceable, or if <parameter>iter</parameter> was
already at the end of the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> can be dereferenced

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.8
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-visible-line" role="function" condition="since:2.8"/>gtk_text_iter_backward_visible_line ()</title>
<indexterm role="2.8"><primary>gtk_text_iter_backward_visible_line</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_visible_line (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves <parameter>iter</parameter> to the start of the previous visible line. Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if
<parameter>iter</parameter> could be moved; i.e. if <parameter>iter</parameter> was at character offset 0, this
function returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>. Therefore if <parameter>iter</parameter> was already on line 0,
but not at the start of the line, <parameter>iter</parameter> is snapped to the start of
the line and the function returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> an iterator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> moved

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.8
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-visible-lines" role="function" condition="since:2.8"/>gtk_text_iter_forward_visible_lines ()</title>
<indexterm role="2.8"><primary>gtk_text_iter_forward_visible_lines</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_visible_lines (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves <parameter>count</parameter> visible lines forward, if possible (if <parameter>count</parameter> would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned. If <parameter>count</parameter> is 0,
the function does nothing and returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>. If <parameter>count</parameter> is negative,
moves backward by 0 - <parameter>count</parameter> lines.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of lines to move forward
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> moved and is dereferenceable

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.8
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-visible-lines" role="function" condition="since:2.8"/>gtk_text_iter_backward_visible_lines ()</title>
<indexterm role="2.8"><primary>gtk_text_iter_backward_visible_lines</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_visible_lines
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> count);</programlisting>
<para>
Moves <parameter>count</parameter> visible lines backward, if possible (if <parameter>count</parameter> would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned. If <parameter>count</parameter> is 0,
the function does nothing and returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>. If <parameter>count</parameter> is negative,
moves forward by 0 - <parameter>count</parameter> lines.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> number of lines to move backward
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether <parameter>iter</parameter> moved and is dereferenceable

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  2.8
</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-set-offset" role="function"/>gtk_text_iter_set_offset ()</title>
<indexterm><primary>gtk_text_iter_set_offset</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_text_iter_set_offset            (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> char_offset);</programlisting>
<para>
Sets <parameter>iter</parameter> to point to <parameter>char_offset</parameter>. <parameter>char_offset</parameter> counts from the start
of the entire text buffer, starting with 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>char_offset</parameter>&nbsp;:</term>
<listitem><simpara> a character number
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-set-line" role="function"/>gtk_text_iter_set_line ()</title>
<indexterm><primary>gtk_text_iter_set_line</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_text_iter_set_line              (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> line_number);</programlisting>
<para>
Moves iterator <parameter>iter</parameter> to the start of the line <parameter>line_number</parameter>.  If
<parameter>line_number</parameter> is negative or larger than the number of lines in the
buffer, moves <parameter>iter</parameter> to the start of the last line in the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>line_number</parameter>&nbsp;:</term>
<listitem><simpara> line number (counted from 0)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-set-line-offset" role="function"/>gtk_text_iter_set_line_offset ()</title>
<indexterm><primary>gtk_text_iter_set_line_offset</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_text_iter_set_line_offset       (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> char_on_line);</programlisting>
<para>
Moves <parameter>iter</parameter> within a line, to a new <emphasis>character</emphasis>
(not byte) offset. The given character offset must be less than or
equal to the number of characters in the line; if equal, <parameter>iter</parameter>
moves to the start of the next line. See
<link linkend="gtk-text-iter-set-line-index"><function>gtk_text_iter_set_line_index()</function></link> if you have a byte index rather than
a character offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link> 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>char_on_line</parameter>&nbsp;:</term>
<listitem><simpara> a character offset relative to the start of <parameter>iter</parameter>'s current line
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-set-line-index" role="function"/>gtk_text_iter_set_line_index ()</title>
<indexterm><primary>gtk_text_iter_set_line_index</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_text_iter_set_line_index        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> byte_on_line);</programlisting>
<para>
Same as <link linkend="gtk-text-iter-set-line-offset"><function>gtk_text_iter_set_line_offset()</function></link>, but works with a
<emphasis>byte</emphasis> index. The given byte index must be at
the start of a character, it can't be in the middle of a UTF-8
encoded character.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>byte_on_line</parameter>&nbsp;:</term>
<listitem><simpara> a byte index relative to the start of <parameter>iter</parameter>'s current line
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-set-visible-line-index" role="function"/>gtk_text_iter_set_visible_line_index ()</title>
<indexterm><primary>gtk_text_iter_set_visible_line_index</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_text_iter_set_visible_line_index
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> byte_on_line);</programlisting>
<para>
Like <link linkend="gtk-text-iter-set-line-index"><function>gtk_text_iter_set_line_index()</function></link>, but the index is in visible
bytes, i.e. text with a tag making it invisible is not counted
in the index.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>byte_on_line</parameter>&nbsp;:</term>
<listitem><simpara> a byte index
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-set-visible-line-offset" role="function"/>gtk_text_iter_set_visible_line_offset ()</title>
<indexterm><primary>gtk_text_iter_set_visible_line_offset</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_text_iter_set_visible_line_offset
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="gint">gint</link> char_on_line);</programlisting>
<para>
Like <link linkend="gtk-text-iter-set-line-offset"><function>gtk_text_iter_set_line_offset()</function></link>, but the offset is in visible
characters, i.e. text with a tag making it invisible is not
counted in the offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>char_on_line</parameter>&nbsp;:</term>
<listitem><simpara> a character offset
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-to-end" role="function"/>gtk_text_iter_forward_to_end ()</title>
<indexterm><primary>gtk_text_iter_forward_to_end</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_text_iter_forward_to_end        (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves <parameter>iter</parameter> forward to the "end iterator," which points one past the last
valid character in the buffer. <link linkend="gtk-text-iter-get-char"><function>gtk_text_iter_get_char()</function></link> called on the
end iterator returns 0, which is convenient for writing loops.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-to-line-end" role="function"/>gtk_text_iter_forward_to_line_end ()</title>
<indexterm><primary>gtk_text_iter_forward_to_line_end</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_to_line_end   (<link linkend="GtkTextIter">GtkTextIter</link> *iter);</programlisting>
<para>
Moves the iterator to point to the paragraph delimiter characters,
which will be either a newline, a carriage return, a carriage
return/newline in sequence, or the Unicode paragraph separator
character. If the iterator is already at the paragraph delimiter
characters, moves to the paragraph delimiter characters for the
next line. If <parameter>iter</parameter> is on the last line in the buffer, which does
not end in paragraph delimiters, moves to the end iterator (end of
the last line), and returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we moved and the new location is not the end iterator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-to-tag-toggle" role="function"/>gtk_text_iter_forward_to_tag_toggle ()</title>
<indexterm><primary>gtk_text_iter_forward_to_tag_toggle</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_to_tag_toggle (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);</programlisting>
<para>
Moves forward to the next toggle (on or off) of the
<link linkend="GtkTextTag"><type>GtkTextTag</type></link> <parameter>tag</parameter>, or to the next toggle of any tag if
<parameter>tag</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>. If no matching tag toggles are found,
returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>, otherwise <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>. Does not return toggles
located at <parameter>iter</parameter>, only toggles after <parameter>iter</parameter>. Sets <parameter>iter</parameter> to
the location of the toggle, or to the end of the buffer
if no toggle is found.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextTag"><type>GtkTextTag</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether we found a tag toggle after <parameter>iter</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-to-tag-toggle" role="function"/>gtk_text_iter_backward_to_tag_toggle ()</title>
<indexterm><primary>gtk_text_iter_backward_to_tag_toggle</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_to_tag_toggle
                                                        (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextTag">GtkTextTag</link> *tag);</programlisting>
<para>
Moves backward to the next toggle (on or off) of the
<link linkend="GtkTextTag"><type>GtkTextTag</type></link> <parameter>tag</parameter>, or to the next toggle of any tag if
<parameter>tag</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>. If no matching tag toggles are found,
returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>, otherwise <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>. Does not return toggles
located at <parameter>iter</parameter>, only toggles before <parameter>iter</parameter>. Sets <parameter>iter</parameter>
to the location of the toggle, or the start of the buffer
if no toggle is found.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextTag"><type>GtkTextTag</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether we found a tag toggle before <parameter>iter</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GtkTextCharPredicate" role="function"/>GtkTextCharPredicate ()</title>
<indexterm><primary>GtkTextCharPredicate</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*GtkTextCharPredicate)             (<link linkend="gunichar">gunichar</link> ch,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ch</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-find-char" role="function"/>gtk_text_iter_forward_find_char ()</title>
<indexterm><primary>gtk_text_iter_forward_find_char</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_find_char     (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextCharPredicate">GtkTextCharPredicate</link> pred,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *limit);</programlisting>
<para>
Advances <parameter>iter</parameter>, calling <parameter>pred</parameter> on each character. If
<parameter>pred</parameter> returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> and stops scanning.
If <parameter>pred</parameter> never returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, <parameter>iter</parameter> is set to <parameter>limit</parameter> if
<parameter>limit</parameter> is non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, otherwise to the end iterator.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pred</parameter>&nbsp;:</term>
<listitem><simpara> a function to be called on each character
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user data for <parameter>pred</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>limit</parameter>&nbsp;:</term>
<listitem><simpara> search limit, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> for none 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether a match was found
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-find-char" role="function"/>gtk_text_iter_backward_find_char ()</title>
<indexterm><primary>gtk_text_iter_backward_find_char</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_find_char    (<link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         <link linkend="GtkTextCharPredicate">GtkTextCharPredicate</link> pred,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *limit);</programlisting>
<para>
Same as <link linkend="gtk-text-iter-forward-find-char"><function>gtk_text_iter_forward_find_char()</function></link>, but goes backward from <parameter>iter</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pred</parameter>&nbsp;:</term>
<listitem><simpara> function to be called on each character
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user data for <parameter>pred</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>limit</parameter>&nbsp;:</term>
<listitem><simpara> search limit, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> for none
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether a match was found
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GtkTextSearchFlags" role="enum"/>enum GtkTextSearchFlags</title>
<indexterm><primary>GtkTextSearchFlags</primary></indexterm><programlisting>typedef enum {
  GTK_TEXT_SEARCH_VISIBLE_ONLY = 1 &lt;&lt; 0,
  GTK_TEXT_SEARCH_TEXT_ONLY    = 1 &lt;&lt; 1
  /* Possible future plans: SEARCH_CASE_INSENSITIVE, SEARCH_REGEXP */
} GtkTextSearchFlags;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-forward-search" role="function"/>gtk_text_iter_forward_search ()</title>
<indexterm><primary>gtk_text_iter_forward_search</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_forward_search        (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         const <link linkend="gchar">gchar</link> *str,
                                                         <link linkend="GtkTextSearchFlags">GtkTextSearchFlags</link> flags,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *match_start,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *match_end,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *limit);</programlisting>
<para>
Searches forward for <parameter>str</parameter>. Any match is returned by setting 
<parameter>match_start</parameter> to the first character of the match and <parameter>match_end</parameter> to the 
first character after the match. The search will not continue past
<parameter>limit</parameter>. Note that a search is a linear or O(n) operation, so you
may wish to use <parameter>limit</parameter> to avoid locking up your UI on large
buffers.
</para>
<para>
If the <link linkend="GTK-TEXT-SEARCH-VISIBLE-ONLY:CAPS"><type>GTK_TEXT_SEARCH_VISIBLE_ONLY</type></link> flag is present, the match may
have invisible text interspersed in <parameter>str</parameter>. i.e. <parameter>str</parameter> will be a
possibly-noncontiguous subsequence of the matched range. similarly,
if you specify <link linkend="GTK-TEXT-SEARCH-TEXT-ONLY:CAPS"><type>GTK_TEXT_SEARCH_TEXT_ONLY</type></link>, the match may have
pixbufs or child widgets mixed inside the matched range. If these
flags are not given, the match must be exact; the special 0xFFFC
character in <parameter>str</parameter> will match embedded pixbufs or child widgets.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> start of search
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> a search string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> flags affecting how the search is done
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>match_start</parameter>&nbsp;:</term>
<listitem><simpara> return location for start of match, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>match_end</parameter>&nbsp;:</term>
<listitem><simpara> return location for end of match, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>limit</parameter>&nbsp;:</term>
<listitem><simpara> bound for the search, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> for the end of the buffer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether a match was found
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-backward-search" role="function"/>gtk_text_iter_backward_search ()</title>
<indexterm><primary>gtk_text_iter_backward_search</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_backward_search       (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         const <link linkend="gchar">gchar</link> *str,
                                                         <link linkend="GtkTextSearchFlags">GtkTextSearchFlags</link> flags,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *match_start,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *match_end,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *limit);</programlisting>
<para>
Same as <link linkend="gtk-text-iter-forward-search"><function>gtk_text_iter_forward_search()</function></link>, but moves backward.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link> where the search begins
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> search string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> bitmask of flags affecting the search
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>match_start</parameter>&nbsp;:</term>
<listitem><simpara> return location for start of match, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>match_end</parameter>&nbsp;:</term>
<listitem><simpara> return location for end of match, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>limit</parameter>&nbsp;:</term>
<listitem><simpara> location of last possible <parameter>match_start</parameter>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> for start of buffer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether a match was found
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-equal" role="function"/>gtk_text_iter_equal ()</title>
<indexterm><primary>gtk_text_iter_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_equal                 (const <link linkend="GtkTextIter">GtkTextIter</link> *lhs,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *rhs);</programlisting>
<para>
Tests whether two iterators are equal, using the fastest possible
mechanism. This function is very fast; you can expect it to perform
better than e.g. getting the character offset for each iterator and
comparing the offsets yourself. Also, it's a bit faster than
<link linkend="gtk-text-iter-compare"><function>gtk_text_iter_compare()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>lhs</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rhs</parameter>&nbsp;:</term>
<listitem><simpara> another <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the iterators point to the same place in the buffer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-compare" role="function"/>gtk_text_iter_compare ()</title>
<indexterm><primary>gtk_text_iter_compare</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_text_iter_compare               (const <link linkend="GtkTextIter">GtkTextIter</link> *lhs,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *rhs);</programlisting>
<para>
A <link linkend="qsort"><function>qsort()</function></link>-style function that returns negative if <parameter>lhs</parameter> is less than
<parameter>rhs</parameter>, positive if <parameter>lhs</parameter> is greater than <parameter>rhs</parameter>, and 0 if they're equal.
Ordering is in character offset order, i.e. the first character in the buffer
is less than the second character in the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>lhs</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rhs</parameter>&nbsp;:</term>
<listitem><simpara> another <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> -1 if <parameter>lhs</parameter> is less than <parameter>rhs</parameter>, 1 if <parameter>lhs</parameter> is greater, 0 if they are equal
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-in-range" role="function"/>gtk_text_iter_in_range ()</title>
<indexterm><primary>gtk_text_iter_in_range</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_text_iter_in_range              (const <link linkend="GtkTextIter">GtkTextIter</link> *iter,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *start,
                                                         const <link linkend="GtkTextIter">GtkTextIter</link> *end);</programlisting>
<para>
Checks whether <parameter>iter</parameter> falls in the range [<parameter>start</parameter>, <parameter>end</parameter>).
<parameter>start</parameter> and <parameter>end</parameter> must be in ascending order.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&nbsp;:</term>
<listitem><simpara> start of range
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&nbsp;:</term>
<listitem><simpara> end of range
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>iter</parameter> is in the range
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-text-iter-order" role="function"/>gtk_text_iter_order ()</title>
<indexterm><primary>gtk_text_iter_order</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_text_iter_order                 (<link linkend="GtkTextIter">GtkTextIter</link> *first,
                                                         <link linkend="GtkTextIter">GtkTextIter</link> *second);</programlisting>
<para>
Swaps the value of <parameter>first</parameter> and <parameter>second</parameter> if <parameter>second</parameter> comes before
<parameter>first</parameter> in the buffer. That is, ensures that <parameter>first</parameter> and <parameter>second</parameter> are
in sequence. Most text buffer functions that take a range call this
automatically on your behalf, so there's no real reason to call it yourself
in those cases. There are some exceptions, such as <link linkend="gtk-text-iter-in-range"><function>gtk_text_iter_in_range()</function></link>,
that expect a pre-sorted range.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>first</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>second</parameter>&nbsp;:</term>
<listitem><simpara> another <link linkend="GtkTextIter"><type>GtkTextIter</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
