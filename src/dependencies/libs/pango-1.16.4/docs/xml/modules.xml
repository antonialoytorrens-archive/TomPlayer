<refentry id="pango-Modules">
<refmeta>
<refentrytitle role="top_of_page">Modules</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>PANGO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Modules</refname>
<refpurpose>Support for loadable modules</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



            <link linkend="PangoIncludedModule">PangoIncludedModule</link>;
            <link linkend="PangoMap">PangoMap</link>;
            <link linkend="PangoMapEntry">PangoMapEntry</link>;
<link linkend="PangoMap">PangoMap</link>*   <link linkend="pango-find-map">pango_find_map</link>                  (<link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             <link linkend="guint">guint</link> engine_type_id,
                                             <link linkend="guint">guint</link> render_type_id);
<link linkend="PangoEngine">PangoEngine</link>* <link linkend="pango-map-get-engine">pango_map_get_engine</link>           (<link linkend="PangoMap">PangoMap</link> *map,
                                             <link linkend="PangoScript">PangoScript</link> script);
<link linkend="void">void</link>        <link linkend="pango-map-get-engines">pango_map_get_engines</link>           (<link linkend="PangoMap">PangoMap</link> *map,
                                             <link linkend="PangoScript">PangoScript</link> script,
                                             <link linkend="GSList">GSList</link> **exact_engines,
                                             <link linkend="GSList">GSList</link> **fallback_engines);
<link linkend="void">void</link>        <link linkend="pango-module-register">pango_module_register</link>           (<link linkend="PangoIncludedModule">PangoIncludedModule</link> *module);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
Functions and macros in this section are used to support loading dynamic
modules that add engines to Pango at run time.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="PangoIncludedModule" role="struct"/>PangoIncludedModule</title>
<indexterm><primary>PangoIncludedModule</primary></indexterm><programlisting>typedef struct {
  void (*list) (PangoEngineInfo **engines,
		int              *n_engines);
  void (*init) (GTypeModule      *module);
  void (*exit) (void);
  PangoEngine *(*create) (const char       *id);
} PangoIncludedModule;
</programlisting>
<para>
The <link linkend="PangoIncludedModule"><type>PangoIncludedModule</type></link> structure for a statically linked module 
contains the functions that would otherwise be loaded from a dynamically 
loaded module.
</para><variablelist role="struct">
<varlistentry>
<term><structfield>list</structfield>&nbsp;()</term>
<listitem><simpara>a function that lists the engines defined in this module.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>init</structfield>&nbsp;()</term>
<listitem><simpara>a function to initialize the module.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>exit</structfield>&nbsp;()</term>
<listitem><simpara>a function to finalize the module.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>create</structfield>&nbsp;()</term>
<listitem><simpara>a function to create an engine, given the engine name.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoMap" role="struct"/>PangoMap</title>
<indexterm><primary>PangoMap</primary></indexterm><programlisting>typedef struct _PangoMap PangoMap;</programlisting>
<para>
A <link linkend="PangoMap"><type>PangoMap</type></link> structure can be used to determine the engine to
use for each character.
</para></refsect2>
<refsect2>
<title><anchor id="PangoMapEntry" role="struct"/>PangoMapEntry</title>
<indexterm><primary>PangoMapEntry</primary></indexterm><programlisting>typedef struct _PangoMapEntry PangoMapEntry;</programlisting>
<para>
A <link linkend="PangoMapEntry"><type>PangoMapEntry</type></link> contains information about the engine that should be used 
for the codepoint to which this entry belongs and also whether the engine 
matches the language tag for this entry's map exactly or just approximately.
</para></refsect2>
<refsect2>
<title><anchor id="pango-find-map" role="function"/>pango_find_map ()</title>
<indexterm><primary>pango_find_map</primary></indexterm><programlisting><link linkend="PangoMap">PangoMap</link>*   pango_find_map                  (<link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             <link linkend="guint">guint</link> engine_type_id,
                                             <link linkend="guint">guint</link> render_type_id);</programlisting>
<para>
Locate a <link linkend="PangoMap"><type>PangoMap</type></link> for a particular engine type and render
type. The resulting map can be used to determine the engine
for each character.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> the language tag for which to find the map
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>engine_type_id</parameter>&nbsp;:</term>
<listitem><simpara> the engine type for the map to find
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>render_type_id</parameter>&nbsp;:</term>
<listitem><simpara> the render type for the map to find
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the suitable <link linkend="PangoMap"><type>PangoMap</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-map-get-engine" role="function"/>pango_map_get_engine ()</title>
<indexterm><primary>pango_map_get_engine</primary></indexterm><programlisting><link linkend="PangoEngine">PangoEngine</link>* pango_map_get_engine           (<link linkend="PangoMap">PangoMap</link> *map,
                                             <link linkend="PangoScript">PangoScript</link> script);</programlisting>
<para>
Returns the best engine listed in the map for a given script</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>map</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoMap"><type>PangoMap</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>script</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoScript"><type>PangoScript</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the best engine, if one is listed for the script,
   or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. The lookup may cause the engine to be loaded;
   once an engine is loaded, it won't be unloaded. If multiple
   engines are exact for the script, the choice of which is
   returned is arbitrary.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-map-get-engines" role="function" condition="since:1.4"/>pango_map_get_engines ()</title>
<indexterm role="1.4"><primary>pango_map_get_engines</primary></indexterm><programlisting><link linkend="void">void</link>        pango_map_get_engines           (<link linkend="PangoMap">PangoMap</link> *map,
                                             <link linkend="PangoScript">PangoScript</link> script,
                                             <link linkend="GSList">GSList</link> **exact_engines,
                                             <link linkend="GSList">GSList</link> **fallback_engines);</programlisting>
<para>
Finds engines in the map that handle the given script. The returned
lists should be freed with g_slist_free, but the engines in the
lists are owned by GLib and will be kept around permanently, so
they should not be unref'ed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>map</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoMap"><type>PangoMap</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>script</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoScript"><type>PangoScript</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>exact_engines</parameter>&nbsp;:</term>
<listitem><simpara> location to store list of engines that exactly
 handle this script.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fallback_engines</parameter>&nbsp;:</term>
<listitem><simpara> location to store list of engines that approximately
 handle this script.
</simpara></listitem></varlistentry>
</variablelist><para>Since  1.4
</para></refsect2>
<refsect2>
<title><anchor id="pango-module-register" role="function"/>pango_module_register ()</title>
<indexterm><primary>pango_module_register</primary></indexterm><programlisting><link linkend="void">void</link>        pango_module_register           (<link linkend="PangoIncludedModule">PangoIncludedModule</link> *module);</programlisting>
<para>
Registers a statically linked module with Pango. The
<link linkend="PangoIncludedModule"><type>PangoIncludedModule</type></link> structure that is passed in contains the
functions that would otherwise be loaded from a dynamically loaded
module.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>module</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoIncludedModule"><type>PangoIncludedModule</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
