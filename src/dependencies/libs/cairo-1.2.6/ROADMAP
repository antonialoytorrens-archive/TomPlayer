This is the cairo roadmap.

Everything here is subject to change, but it is hoped that all of it
will be useful. If you want to influence, please feel free to get
involved with cairo (see http://cairographics.org ).

The intent is for this to be a living document. We want both the users
of cairo, (GTK+, GNOME, Mozilla, Mono, etc. etc.) to let us know
features they need and dates by which they are needed so that we can
use those to guide our plans.

Additionally, people who are actively developing cairo itself should
regularly update this document to reflect their current plans. If you
don't want to see a particular release happen without some essential
feature, then put that feature on the list and put your name next to
it to indicate you are working on it.

Targets
=======
Firefox 3.0 - http://www.mozilla.org/projects/firefox/roadmap.html
------------------------------------------------------------------
Firefox 3 (scheduled for early 2007?) is the first release expected to
use cairo for all rendering. In the meantime, development builds using
cairo are available

Satisfying firefox 3 well requiring releasing new versions of cairo
before November 2006 (or earlier) that incorporate the patches coming
from mozilla, (clip querying), and much-improved performance.

Themes and Schedules
====================
cairo-1.2.6 (no schedule; may not happen):
 - 7744: Compile troubles on AIX
 - PS/PDF Type1/Type3 problem with rotated font_matrices

cairo-1.4 (October 2006): Better performance
 - New tessellator
 - New rasterization
 - Finer-grained fallbacks for PS/PDF

cairo 1.4.0 ideas (think performance!)
======================================
 Implement framework for performance regression testing

 Investigate "low-hanging fruit" identified by David Turner (write test case for each)

 Look into speeding up pixman gradients

 Look into improving text positioning/placement on ARM (with no hardware floating-point)

 Look into speeding up dashing used for GTK+ focus rectangle

 Look into other GTK+ performance regressions as identified on performance-list

 xlib backend
     Switch to server-side gradients for xlib backend
     Fix X server to make server-side gradients faster
     Switch to using XRenderAddTraps rather than XRenderCompositeTrapezoids

 Implement a non-trapezoid based rasterizer for use with xlib and other backends

 Cull geometry outside clip region bounds

 New tessellator

 Look into using alloca instead of malloc when copying glyphs/path/etc to edit
 and use in one function and deallocate upon return.

 Look into generating EPS.  That may be done using a new constructor for the
 PS backend, or better, using an API similar to
 cairo_svg_surface_restrict_to_version.  The PDF backend needs a restrict_to
 API at some point too.

 Look into the glyph cache.  Moreover, make sure we are reusing scaled fonts
 enough.

 User-font API

 Bugs to fix
 -----------
   CAIRO_EXTEND_PAD is not implemented for surface patterns
   CAIRO_FORMAT_RGB16_565 should be deprecated

For other ideas that have been proposed for cairo but are not yet
scheduled on the roadmap of any particular release, please see the
TODO file next to this ROADMAP file.
