diff -Nur libminigui-str-1.6.2/configure.in libminigui-str-1.6.2-patched/configure.in
--- libminigui-str-1.6.2/configure.in	2005-02-16 08:45:09.000000000 +0100
+++ libminigui-str-1.6.2-patched/configure.in	2008-03-06 20:50:27.000000000 +0100
@@ -122,6 +122,7 @@
 build_hh2410r3_ial_engine="no"
 build_fxrm9200_ial_engine="no"
 build_embest2410_ial_engine="no"
+build_tomtomts_ial_engine="no"
 build_dummy_ial_engine="yes"
 build_auto_ial_engine="no"
 build_qvfb_ial_engine="yes"
@@ -131,7 +132,7 @@
 build_native_ms="yes"
 build_native_ms3="yes"
 build_native_gpm="yes"
-build_text_mode="yes"
+build_text_mode="no"
 
 dnl Font related options
 build_rbf_support="yes"
@@ -338,6 +339,11 @@
 [  --enable-hh2410r3ial     build the input engine for HHARM2410R3 touch screen <default=no>],
 build_hh2410r3_ial_engine=$enableval)
 
+AC_ARG_ENABLE(tomtomtsial,
+[  --enable-tomtomtsial     build the input engine for TOMTOM touch screen <default=no>],
+build_tomtomts_ial_engine=$enableval)
+
+AC_ARG_ENABLE(dummyial,
 AC_ARG_ENABLE(dummyial,
 [  --enable-dummyial        build the Dummy IAL engine <default=yes>],
 build_dummy_ial_engine=$enableval)
@@ -806,6 +812,11 @@
             [Define if include IAL engine for HHARM2410R3 touch screen])
 fi
 
+if test "x$build_tomtomts_ial_engine" = "xyes"; then
+    AC_DEFINE(_TOMTOM_TS_IAL, 1,
+            [Define if include IAL engine for TOMTOM touch screen])
+fi
+
 if test "x$build_dummy_ial_engine" = "xyes"; then
     AC_DEFINE(_DUMMY_IAL, 1,
             [Define if include the dummy IAL engine])
diff -Nur libminigui-str-1.6.2/src/gal/native/native.c libminigui-str-1.6.2-patched/src/gal/native/native.c
--- libminigui-str-1.6.2/src/gal/native/native.c	2005-01-08 08:54:15.000000000 +0100
+++ libminigui-str-1.6.2-patched/src/gal/native/native.c	2008-03-06 20:50:27.000000000 +0100
@@ -42,10 +42,8 @@
 #include "gal.h"
 #include "native.h"
 
-#ifndef _COOR_TRANS
-#define _COOR_TRANS     0
-#define _ROT_DIR_CW    0
-#endif
+int coor_trans=0;
+int rot_dir_cw=0;
 
 #if defined(_LITE_VERSION) && !(_STAND_ALONE)
 
@@ -278,7 +276,7 @@
 
 static int width (GAL_GC gc) 
 { 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd)
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd)
         return gc.psd->yres; 
     else
         return gc.psd->xres; 
@@ -286,7 +284,7 @@
 
 static int height (GAL_GC gc) 
 { 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd)
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd)
         return gc.psd->xres; 
     else
         return gc.psd->yres; 
@@ -303,7 +301,7 @@
     PSD psd;
     psd = gc.psd;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd) {
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd) {
         if (x1 < 0) x1 = 0;
         if (y1 < 0) y1 = 0;
         if (x2 > psd->yres - 1) x2 = psd->yres - 1;
@@ -318,8 +316,8 @@
 
     psd->doclip = 1;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd)
-        rotatecoor (&x1, &y1, &x2, &y2, _ROT_DIR_CW?psd->xres:psd->yres, _ROT_DIR_CW?0:1);
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd)
+        rotatecoor (&x1, &y1, &x2, &y2, rot_dir_cw?psd->xres:psd->yres, rot_dir_cw?0:1);
         
     psd->clipminx = x1;
     psd->clipminy = y1;
@@ -334,7 +332,7 @@
     PSD psd;
     psd = gc.psd;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd)
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd)
         setclipping (gc, 0, 0, psd->yres - 1, psd->xres - 1);
     else
         setclipping (gc, 0, 0, psd->xres - 1, psd->yres - 1);
@@ -357,8 +355,8 @@
     *x2 = psd->clipmaxx - 1;
     *y2 = psd->clipmaxy - 1;    
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd)
-        rotatecoor (x1, y1, x2, y2, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?1:0);
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd)
+        rotatecoor (x1, y1, x2, y2, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?1:0);
 
     return 0;
 }
@@ -647,8 +645,8 @@
 
     BLOCK_DRAW_SEM;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd)
-        rotaterect (&x, &y, &w, &h, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd)
+        rotaterect (&x, &y, &w, &h, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
 
     if (native_gen_clipbox (gc.psd, &x, &y, &w, &h) == CLIP_INVISIBLE)
         goto ret;
@@ -667,7 +665,7 @@
     int bpp = bytesperpixel (gc);
     gal_uint8 *tmpptr= (gal_uint8*) buf;
 
-    rotaterect (&x, &y, &w, &h, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?1:0);
+    rotaterect (&x, &y, &w, &h, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?1:0);
 
     if ( y < 0 ) {
         h += y;
@@ -684,9 +682,9 @@
     if ( y + h -1 >= gc.psd->xres) 
         h = gc.psd->xres - y;
 
-    rotatepoint (&x, &y, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+    rotatepoint (&x, &y, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
 
-    if (_ROT_DIR_CW) {
+    if (rot_dir_cw) {
         while (h > 0) {
             gc.psd->PutBox (gc.psd, x, y, 1, w, tmpptr);
 
@@ -718,9 +716,9 @@
     
     BLOCK_DRAW_SEM;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd) {
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd) {
 
-        rotaterect (&x, &y, &w, &h, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+        rotaterect (&x, &y, &w, &h, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
 
         if (gc.psd->doclip) {
             if ((x + w - 1 < gc.psd->clipminx) || (x >= gc.psd->clipmaxx))
@@ -774,8 +772,8 @@
 
     BLOCK_DRAW_SEM;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd) {
-        rotaterect (&x, &y, &w, &h, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd) {
+        rotaterect (&x, &y, &w, &h, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
         if (gc.psd->doclip) {
             if ((x + w - 1 < gc.psd->clipminx) || (x >= gc.psd->clipmaxx))
                 goto inv_args;
@@ -787,7 +785,7 @@
             if ((y + h - 1 < 0) || (y >= gc.psd->yres))
                 goto inv_args;
         }
-        rotaterect (&x, &y, &w, &h, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?1:0);
+        rotaterect (&x, &y, &w, &h, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?1:0);
 
         bpp = bytesperpixel (gc);
 
@@ -806,9 +804,9 @@
         if ( y + h -1 >= gc.psd->xres) 
             h = gc.psd->xres - y ;
 
-        rotatepoint (&x, &y, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+        rotatepoint (&x, &y, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
 
-        if (_ROT_DIR_CW) {
+        if (rot_dir_cw) {
             while (h > 0) {
                 gc.psd->PutBoxMask (gc.psd, x, y, 1, w, tmpptr, cxx);
     
@@ -876,9 +874,9 @@
     if ( y + h -1 >= gc.psd->xres) 
         h = gc.psd->xres - y ;
 
-    rotatepoint (&x, &y, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+    rotatepoint (&x, &y, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
 
-    if (_ROT_DIR_CW) {
+    if (rot_dir_cw) {
         while (h > 0) {
             gc.psd->GetBox (gc.psd, x, y, 1, w, tmpptr);
 
@@ -908,7 +906,7 @@
 {
     if ((w <= 0) || (h <= 0)) return -1;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd) {
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd) {
 
         if ((x + w - 1 < 0) || (x >= gc.psd->yres))
             return -1;
@@ -947,9 +945,9 @@
 
     if ((w <= 0) || (h <= 0)) return -1;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd) {
-        rotaterect (&x, &y, &w, &h, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
-        rotaterect (&nx, &ny, &org_w, &org_h, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd) {
+        rotaterect (&x, &y, &w, &h, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
+        rotaterect (&nx, &ny, &org_w, &org_h, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
     }
 
     if ((x >= gc.psd->xres) || (x + w - 1 < 0)) return -1;
@@ -1055,7 +1053,7 @@
     }
     
     //src clip to screen
-    if (_COOR_TRANS && src.psd == __mg_cur_gfx->phygc.psd) {
+    if (coor_trans && src.psd == __mg_cur_gfx->phygc.psd) {
 
         /* dst is clipped and is a memory gc */
         if ((dx + w - 1 < dst.psd->clipminx) || (dx >= dst.psd->clipmaxx))
@@ -1093,7 +1091,7 @@
                         dst.psd->xres * bytesperpixel (dst));
     }
 
-    if (_COOR_TRANS && dst.psd == __mg_cur_gfx->phygc.psd) {
+    if (coor_trans && dst.psd == __mg_cur_gfx->phygc.psd) {
 
         /* src is a memory gc */
         if ((sx + w <= 0) || (sx >= src.psd->xres))
@@ -1217,9 +1215,9 @@
 
     BLOCK_DRAW_SEM;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd) {
-        rotatepoint (&x, &y, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
-        if (!_ROT_DIR_CW) y -= w - 1;
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd) {
+        rotatepoint (&x, &y, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
+        if (!rot_dir_cw) y -= w - 1;
 
         if (native_gen_clipvline (gc.psd, &x, &y, &w) == CLIP_INVISIBLE )
             goto ret;
@@ -1246,9 +1244,9 @@
     
     BLOCK_DRAW_SEM;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd) {
-        rotatepoint (&x, &y, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
-        if (_ROT_DIR_CW) x -= h - 1;
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd) {
+        rotatepoint (&x, &y, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
+        if (rot_dir_cw) x -= h - 1;
 
         if (native_gen_clipvline (gc.psd, &x, &y, &h) == CLIP_INVISIBLE )
             goto ret;
@@ -1276,8 +1274,8 @@
 {
     BLOCK_DRAW_SEM;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd)
-        rotatepoint (&x, &y, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd)
+        rotatepoint (&x, &y, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
 
     if (native_gen_clippoint (gc.psd, x, y)) {
         gc.psd->DrawPixel (gc.psd, x, y, pixel);
@@ -1291,9 +1289,9 @@
 
 static int getpixel (GAL_GC gc, int x, int y, gal_pixel* pixel)
 {
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd) {
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd) {
         if ((x >= 0) && (x < gc.psd->yres) && (y >= 0) && (y < gc.psd->xres)) {
-            rotatepoint (&x, &y, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+            rotatepoint (&x, &y, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
             *pixel = gc.psd->ReadPixel (gc.psd, x, y);
         } else 
             return -1;
@@ -1317,9 +1315,9 @@
     getfgcolor(gc,&oldcolor);
     setfgcolor(gc,pixel);
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd) {
-        rotatepoint (&x1, &y1, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
-        rotatepoint (&x2, &y2, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd) {
+        rotatepoint (&x1, &y1, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
+        rotatepoint (&x2, &y2, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
     }
 
     native_gen_line (gc.psd, x1, y1, x2, y2, TRUE);
@@ -1343,8 +1341,8 @@
     getfgcolor(gc,&oldcolor);
     setfgcolor(gc,pixel);
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd)
-        rotatecoor (&l, &t, &r, &b, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd)
+        rotatecoor (&l, &t, &r, &b, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
 
     native_gen_rect (gc.psd, l, t, r, b);
     if (gc.psd->UpdateRect) gc.psd->UpdateRect (gc.psd, l, t, r, b);
@@ -1359,8 +1357,8 @@
 {
     BLOCK_DRAW_SEM;
 
-    if (_COOR_TRANS && gc.psd == __mg_cur_gfx->phygc.psd)
-        rotatepoint (&x, &y, _ROT_DIR_CW?gc.psd->xres:gc.psd->yres, _ROT_DIR_CW?0:1);
+    if (coor_trans && gc.psd == __mg_cur_gfx->phygc.psd)
+        rotatepoint (&x, &y, rot_dir_cw?gc.psd->xres:gc.psd->yres, rot_dir_cw?0:1);
     native_gen_circle (gc.psd, x, y, r, pixel);
     if (gc.psd->UpdateRect) gc.psd->UpdateRect (gc.psd, x - r, y - r, x + r, y + r);
 
@@ -1383,8 +1381,11 @@
 
     if (0) {}
 #ifdef _NATIVE_GAL_FBCON
-    else if (strcmp (gfx->id, "fbcon") == 0)
+    else if (strcmp (gfx->id, "fbcon") == 0){
+        int rotate = 0;
         psd = scrdev.Open (&scrdev);
+        
+    }
 #endif
 #ifdef _NATIVE_GAL_QVFB
     else if (strcmp (gfx->id, "qvfb") == 0)
@@ -1401,7 +1402,7 @@
     gfx->bytes_per_phypixel = (psd->bpp + 7 ) / 8;
     gfx->bits_per_phypixel  =  psd->bpp;
 
-    if (_COOR_TRANS) {
+    if (coor_trans) {
         gfx->width_phygc        = psd->yres; 
         gfx->height_phygc       = psd->xres;
     }
@@ -1463,7 +1464,7 @@
     for (i = 0; i < 17; i++)
         SysPixelIndex [i] = mapcolor (gfx->phygc, (GAL_Color*)(SysPixelColor + i));
 
-    if (_COOR_TRANS)
+    if (coor_trans)
         setclipping (gfx->phygc, 0, 0, psd->yres - 1, psd->xres - 1);
     else
         setclipping (gfx->phygc, 0, 0, psd->xres - 1, psd->yres - 1);
@@ -1475,4 +1476,3 @@
 {
     gfx->phygc.psd->Close(gfx->phygc.psd);
 }
-
diff -Nur libminigui-str-1.6.2/src/gal/native/native.h libminigui-str-1.6.2-patched/src/gal/native/native.h
--- libminigui-str-1.6.2/src/gal/native/native.h	2004-08-02 05:00:03.000000000 +0200
+++ libminigui-str-1.6.2-patched/src/gal/native/native.h	2008-03-06 21:28:22.000000000 +0100
@@ -92,6 +92,8 @@
 extern SCREENDEVICE    commlcd;    
 #endif
 
+extern int coor_trans;
+extern int rot_dir_cw;
 
 BOOL    InitNative(GFX* gfx);
 void    TermNative(GFX* gfx);
diff -Nur libminigui-str-1.6.2/src/gal/native/scr_fb.c libminigui-str-1.6.2-patched/src/gal/native/scr_fb.c
--- libminigui-str-1.6.2/src/gal/native/scr_fb.c	2004-09-16 04:08:23.000000000 +0200
+++ libminigui-str-1.6.2-patched/src/gal/native/scr_fb.c	2008-03-06 21:27:13.000000000 +0100
@@ -93,6 +93,15 @@
 	psd->xres = psd->xvirtres = fb_var.xres;
 	psd->yres = psd->yvirtres = fb_var.yres;
 
+	if( psd->yres > psd->xres ){
+		coor_trans = 1;
+		rot_dir_cw = 1;
+	}
+	else{
+		coor_trans = 0;
+		rot_dir_cw = 0;
+	}
+
 	/* set planes from fb type*/
 	if (type == FB_TYPE_VGA_PLANES)
 		psd->planes = 4;
diff -Nur libminigui-str-1.6.2/src/ial/ial.c libminigui-str-1.6.2-patched/src/ial/ial.c
--- libminigui-str-1.6.2/src/ial/ial.c	2005-01-08 09:10:38.000000000 +0100
+++ libminigui-str-1.6.2-patched/src/ial/ial.c	2008-03-06 20:50:27.000000000 +0100
@@ -161,6 +161,10 @@
     #include "abssig.h"
 #endif
 
+#ifdef _TOMTOM_TS_IAL
+    #include "ial_tomtom_ts.h"
+#endif
+
 #define LEN_ENGINE_NAME        16
 #define LEN_MTYPE_NAME         16
 
@@ -274,6 +278,9 @@
 #ifdef _ABSSIG_IAL
     {"abssig", InitABSSIGInput, TermABSSIGInput},
 #endif
+#ifdef _TOMTOM_TS_IAL
+    {"tomtom", InitTomtomTSInput, TermTomtomTSInput},
+#endif
 };
 
 INPUT* __mg_cur_input;
@@ -529,4 +536,3 @@
 }
 
 #endif /* _MISC_MOUSECALIBRATE */
-
diff -Nur libminigui-str-1.6.2/src/ial/ial_tomtom_ts.c libminigui-str-1.6.2-patched/src/ial/ial_tomtom_ts.c
--- libminigui-str-1.6.2/src/ial/ial_tomtom_ts.c	1970-01-01 01:00:00.000000000 +0100
+++ libminigui-str-1.6.2-patched/src/ial/ial_tomtom_ts.c	2008-03-06 20:50:27.000000000 +0100
@@ -0,0 +1,174 @@
+/***************************************************************************
+ *            ial_tomtom_ts.c
+ *
+ *  Fri Jan  4 18:42:38 2008
+ *  Copyright  2008  nullpointer
+ *  Email nullpointer[at]lavabit[dot]com
+ ****************************************************************************/
+
+/*
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+ 
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "common.h"
+
+#ifdef _TOMTOM_TS_IAL
+
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <sys/poll.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <linux/kd.h>
+#include <errno.h>
+
+#include "ial.h"
+#include "ial_tomtom_ts.h"
+
+
+
+typedef struct {
+	short pressure;
+	short x;
+	short y;
+	short state;
+} TS_EVENT;
+
+static int fd = -1;
+
+
+static int mousex = 0;
+static int mousey = 0;
+static int stylus = 0;
+
+static int mouse_update (void)
+{
+	TS_EVENT cBuffer;
+
+	if( read (fd, &cBuffer, sizeof (TS_EVENT)) > 0){
+		mousex = cBuffer.x;
+		mousey = cBuffer.y;
+
+        if (cBuffer.pressure==255)
+			stylus = IAL_MOUSE_LEFTBUTTON;
+        else
+			stylus = 0;
+    }
+
+    return 1;
+}
+
+#ifdef _LITE_VERSION 
+static int wait_event (int which, int maxfd, fd_set *in, fd_set *out, fd_set *except,
+                struct timeval *timeout)
+#else
+static int wait_event (int which, fd_set *in, fd_set *out, fd_set *except,
+                struct timeval *timeout)
+#endif
+{
+    fd_set rfds;
+    int    retvalue = 0;
+    int    e;
+
+    if (!in) {
+        in = &rfds;
+        FD_ZERO (in);
+    }
+
+    if ((which & IAL_MOUSEEVENT) && fd >= 0) {
+        FD_SET (fd, in);
+#ifdef _LITE_VERSION
+        if (fd > maxfd) maxfd = fd;
+#endif
+    }
+
+#ifdef _LITE_VERSION
+    e = select (maxfd + 1, in, out, except, timeout) ;
+#else
+    e = select (FD_SETSIZE, in, out, except, timeout) ;
+#endif
+
+    if (e > 0) {
+        if (fd >= 0 && FD_ISSET (fd, in)) {
+            FD_CLR (fd, in);
+            retvalue |= IAL_MOUSEEVENT;
+        }
+    }
+    else if (e < 0) {
+        return -1;
+    }
+
+    return retvalue;
+}
+
+
+
+static int mouse_getbutton (void)
+{
+    return stylus;
+}
+
+static void mouse_getxy (int *x, int* y)
+{
+    *x = mousex;
+    *y = mousey;
+}
+
+
+
+BOOL InitTomtomTSInput (INPUT* input, const char* mdev, const char* mtype)
+{
+	TS_EVENT tsevent;
+
+	long flag;
+	
+
+	if((fd = open("/dev/ts", O_RDWR | O_NOCTTY | O_NONBLOCK)) < 0) {
+		fprintf (stderr, "could not open touchscreen");
+		fd = -1;
+		return FALSE;
+	}
+	
+	flag = fcntl(fd, F_GETFL, 0);
+	flag |= O_NONBLOCK;
+	fcntl(fd, F_SETFL, flag);
+
+	// flush fifo
+	while(read(fd, &tsevent, sizeof(tsevent)) > 0) ;
+
+	input->update_mouse = mouse_update;
+	input->get_mouse_xy = mouse_getxy;
+	input->set_mouse_xy = NULL;
+	input->get_mouse_button = mouse_getbutton;
+	input->set_mouse_range = NULL;
+
+	input->wait_event = wait_event;
+	
+    return TRUE;
+}
+
+void TermTomtomTSInput (void)
+{
+    if (fd >= 0)
+        close (fd);
+    fd = -1;
+}
+
+#endif /* _TOMTOM_TS_IAL */
diff -Nur libminigui-str-1.6.2/src/ial/ial_tomtom_ts.h libminigui-str-1.6.2-patched/src/ial/ial_tomtom_ts.h
--- libminigui-str-1.6.2/src/ial/ial_tomtom_ts.h	1970-01-01 01:00:00.000000000 +0100
+++ libminigui-str-1.6.2-patched/src/ial/ial_tomtom_ts.h	2008-03-06 20:50:27.000000000 +0100
@@ -0,0 +1,39 @@
+/***************************************************************************
+ *            ial_tomtom_ts.h
+ *
+ *  Fri Jan  4 20:11:12 2008
+ *  Copyright  2008  nullpointer
+ *  Email
+ ****************************************************************************/
+
+/*
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+ 
+#ifndef GUI_IAL_TOMTOM_TS_H
+#define GUI_IAL_TOMTOM_TS_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif	/* __cplusplus */
+
+BOOL InitTomtomTSInput (INPUT* input, const char* mdev, const char* mtype);
+void TermTomtomTSInput (void);
+
+#ifdef __cplusplus
+}
+#endif	/* __cplusplus */
+
+#endif	/* GUI_IAL_TOMTOM_TS_H */
diff -Nur libminigui-str-1.6.2/src/ial/Makefile.am libminigui-str-1.6.2-patched/src/ial/Makefile.am
--- libminigui-str-1.6.2/src/ial/Makefile.am	2005-02-16 07:19:40.000000000 +0100
+++ libminigui-str-1.6.2-patched/src/ial/Makefile.am	2008-03-06 20:50:27.000000000 +0100
@@ -25,6 +25,7 @@
 HH2410R3_SRCS = hh2410r3.c hh2410r3.h
 FFT7202_SRCS = fft7202.c fft7202.h
 FXRM9200_SRCS = fxrm9200.c fxrm9200.h
+TOMTOM_TS_SRCS = ial_tomtom_ts.c ial_tomtom_ts.h
 
 if NATIVE_IAL_ENGINE
 libial_la_LIBADD = native/libnative.la
@@ -35,5 +36,4 @@
                     $(MC68X328_SRCS) $(SMDK2410_SRCS) \
                     $(UCB1X00_SRCS) $(AUTO_SRCS) \
                     $(HH2410R3_SRCS) $(EMBEST2410_SRCS)\
-                    $(HH5249KBDIR_SRCS) $(FFT7202_SRCS) $(FXRM9200_SRCS)
-
+                    $(HH5249KBDIR_SRCS) $(FFT7202_SRCS) $(FXRM9200_SRCS) $(TOMTOM_TS_SRCS)
diff -Nur libminigui-str-1.6.2/src/include/gal.h libminigui-str-1.6.2-patched/src/include/gal.h
--- libminigui-str-1.6.2/src/include/gal.h	2004-01-26 10:37:12.000000000 +0100
+++ libminigui-str-1.6.2-patched/src/include/gal.h	2008-03-06 20:50:27.000000000 +0100
@@ -31,13 +31,9 @@
     #include "oldgal.h"
 #endif
 
-#ifdef _COOR_TRANS
-  #define WIDTHOFPHYSCREEN      HEIGHTOFPHYGC
-  #define HEIGHTOFPHYSCREEN     WIDTHOFPHYGC
-#else
-  #define WIDTHOFPHYSCREEN      WIDTHOFPHYGC
-  #define HEIGHTOFPHYSCREEN     HEIGHTOFPHYGC
-#endif
+extern int coor_trans;
+#define WIDTHOFPHYSCREEN      (coor_trans?HEIGHTOFPHYGC:WIDTHOFPHYGC)
+#define HEIGHTOFPHYSCREEN     (coor_trans?WIDTHOFPHYGC:HEIGHTOFPHYGC)
 
-#endif  /* GUI_GAL_H */
 
+#endif  /* GUI_GAL_H */
diff -Nur libminigui-str-1.6.2/src/include/ial.h libminigui-str-1.6.2-patched/src/include/ial.h
--- libminigui-str-1.6.2/src/include/ial.h	2005-01-07 04:46:23.000000000 +0100
+++ libminigui-str-1.6.2-patched/src/include/ial.h	2008-03-06 20:50:27.000000000 +0100
@@ -104,8 +104,14 @@
     if (*x < 0) *x = 0;
     if (*y < 0) *y = 0;
 
+    if( coor_trans ){
+        if (*x > (HEIGHTOFPHYSCREEN-1)) *x = (HEIGHTOFPHYSCREEN-1);
+        if (*y > (WIDTHOFPHYSCREEN-1)) *y = (WIDTHOFPHYSCREEN-1);
+    }
+    else{
     if (*x > (WIDTHOFPHYSCREEN-1)) *x = (WIDTHOFPHYSCREEN-1);
     if (*y > (HEIGHTOFPHYSCREEN-1)) *y = (HEIGHTOFPHYSCREEN-1);
+    }
 
 #ifdef _COOR_TRANS
 #if _ROT_DIR_CW
@@ -184,4 +190,3 @@
 #endif  /* __cplusplus */
 
 #endif  /* GUI_IAL_H */
-
